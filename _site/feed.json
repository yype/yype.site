{
    "version": "https://jsonfeed.org/version/1",
    "title": "yype.site",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "hacking & exploring",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2021/01/26/answers-to-understanding-cryptography-problems-chapter2",
            "title": "Solutions to Understanding Cryptography Problems - Chapter 2",
            "summary": null,
            "content_text": "  Intro  Problems          2.1      2.2      2.3      2.4      2.5      2.6      2.7      2.8      2.9      2.10      2.11      2.12      IntroMy solutions to the practice problems in “Understanding Cryptography: A Textbook for Students and Practitioners - Chapter 2”.The solution scripts to some of the problems have been uploaded to GitHub, you can check them out at: https://github.com/yype/UnderstandingCrypto.Problems2.1(1) The key could look like a stream of letters from A~Z, which represent keys between 0~25.\\[y_i=e_{k_i}(x_i)=x_i+k_i\\bmod26\\\\x_i=d_{k_i}(y_i)=y_i-k_i\\bmod26\\\\\\](2) I found this problem strange at first, and later, according to the Internet, I found that the key provided in the book is wrong. The correct key should be rsidpy dkawoy.Solution script:enc = 'bsaspp kkuosp'key = 'rsidpy dkawoy'  # the key in the book is wrongdec = ''for i in range(len(enc)):    if enc[i] != ' ':        e, k = ord(enc[i])-ord('a'), ord(key[i])-ord('a')        dec += chr(((e-k) % 26)+ord('a'))    else:        dec += ' 'print(dec)Output:kaspar hauser(3) According to this, it seems that Hauser died of a fatal stab wound on 17 December 1833.2.2(1) Life cycle of the key: Every single bit in the key should never be reused.(2) Storage of the key during the life cycle: The key must be stored at both the sending and receiving end.(3) Storage of the key after the life cycle: They must be destroyed since all former encrypted data will become vulunerable if these keys are leaked in the future.(4) Key distribution: The safest way, in my point of view, is to make only 2 copies of the key in the world, and to distribute the keys physically(without being intercepted by any 3rd parties).(5) Generation of the key: A TRNG should be used. Or else it will be the same as using a normal stream cipher along with a PRNG, and just distributing the key of the PRNG.2.3When 128 bits of the plaintext($x_0$~$x_{127}$) and their corresponding cipher bits($y_0$~$y_{127}$) are known to an attacker, he/she/it can easily calculate the key bits($k_0$~$k_{127}$) used in the encryption process:\\[k_i=x_i\\oplus y_i,i=0,1,...,127\\]2.4The attacker will have no idea which key should be correct, so any brute-force attack is meaningless. Each key guessed can be used to decrypt the ciphertext, generating a plaintext(plaindata). There is no way the attacker can know which key is right and if the plaintext decrypted is the original one.2.5(1)\\[(c_2=1,c_1=0,c_0=1)\\\\\\text{}\\\\\\begin{array}{|c|c c c|}\\text{Clk} &amp; FF_2 &amp; FF_1 &amp; FF_0=s_i \\\\0 &amp; 1 &amp; 0 &amp; 0 \\\\1 &amp; 1 &amp; 1 &amp; 0 \\\\2 &amp; 1 &amp; 1 &amp; 1 \\\\3 &amp; 0 &amp; 1 &amp; 1 \\\\4 &amp; 1 &amp; 0 &amp; 1 \\\\5 &amp; 0 &amp; 1 &amp; 0 \\\\6 &amp; 0 &amp; 0 &amp; 1 \\\\7 &amp; 1 &amp; 0 &amp; 0 \\\\\\end{array}\\\\\\]So the sequence is (0011101)*.(2)\\[(c_2=1,c_1=0,c_0=1)\\\\\\text{}\\\\\\begin{array}{|c|c c c|}\\text{Clk} &amp; FF_2 &amp; FF_1 &amp; FF_0=s_i \\\\0 &amp; 0 &amp; 1 &amp; 1 \\\\1 &amp; 1 &amp; 0 &amp; 1 \\\\2 &amp; 0 &amp; 1 &amp; 0 \\\\3 &amp; 0 &amp; 0 &amp; 1 \\\\4 &amp; 1 &amp; 0 &amp; 0 \\\\5 &amp; 1 &amp; 1 &amp; 0 \\\\6 &amp; 1 &amp; 1 &amp; 1 \\\\7 &amp; 0 &amp; 1 &amp; 1 \\\\\\end{array}\\\\\\]So the sequence is (1101001)*.(3) a) Their periods are the same. b) S2 can be viewed as ROL(S1, 3), where S1/S2 represent the repetends of the first and second sequence.2.6One possible attack: I will need to know 25 bytes(letters), which is 200(bits) / 8(bits/byte), of the ciphertext and their corresponding plaintext. Then I will be able to calculate 200 bits of the key sequence used($k_i=\\text{plainbit}_i\\oplus\\text{cipherbit}_i$).After that, all left to do is to determine the actual keysize. We can simply run several brute-force decryptions, starting from the first plaintext bit we know, using the first $k$ bits of the 200 key bits calculated, where $k=150,151,…,200$.It should be noted that if the keysize used is not correct, there is a great chance that the data decrypted is not readable(printable) ASCII text. As a result, once we successfully decrypt the ciphertext and get a readable plaintext after the 25th byte, we know what the actual keysize is.2.7The chosen LFSR’s polynomial is (0,1,3,4,8). I wrote a simple script to help me with the calculation, and the resulting first two output bytes can be viewed as a little endian number 0x90ff.chapt2&gt; py .\\p2.7.py0x90ff2.8(1) Draw the corresponding LFSR for each of the three polynomials.I don’t want to draw them :P(2) I wrote a script to calculate all the possible initial values and their corresponding sequence lengh, it outputs as follows:chapt2&gt; py .\\p2.8.pyPolynomial: (0, 1, 4)init            len(seq)1               152               153               154               155               156               157               158               159               1510              1511              1512              1513              1514              1515              15Polynomial: (0, 2, 4)init            len(seq)1               62               63               64               65               66               37               68               69               610              611              312              613              314              615              6Polynomial: (0, 1, 2, 3, 4)init            len(seq)1               52               53               54               55               56               57               58               59               510              511              512              513              514              515              5We can see that, the first polynomial $x^4+x+1$ can generate a maximum-length($2^4-1=15$) sequence, so it is a primitive polynomial. The second polynomial $x^4+x^2+1$ does not generate a maximum-length sequence and its sequence length depends on its initial value, so it is an irreducible polynomial. The third polynomial $x^4+x^3+x^2+x+1$ does not generate a maximum-length sequence, but its sequence length stays the same despite the changing initial value, so it is a reducible polynomial.2.9(1) $256\\times2=512\\text{(bits)}$.(2) Let the known plaintext bits be given by $x_0,x_1,…,x_{511}$ and the corresponding ciphertext bits by $y_0,y_1,…,y_{511}$. With these 512 pairs of plaintext and ciphertext bits, we can reconstruct the first 512 key stream bits:\\[s_i=x_i\\oplus y_i,i=0,1,...,511\\]Our goal is to find the key bits given by the feedback coefficients $p_i$. The relationship between the unknown key bits $p_i$ and the key stream bits $s_i$ can be described as follows:\\[s_{i+256}=\\sum_{j=0}^{255}{p_j\\cdot s_{i+j}}, i=0,1,...,255\\]This actually represents 256 linearly independent formulae, which contain 256 unknown variables $p_0,p_1,…,p_255$. This system can be easily solved using Gaussian elimination, matrix inversion or any other algorithm for solving systems of linear equations.(3.a) The key is $p_0,p_1,…,p_{255}$.(3.b) If we use the initial contents of the LFSR as the key, the attacker can get the key almost without performing any attack since the first 256 bits of the key stream bits are exactly the same as the initial content bits. If we use the initial contents of the LFSR as part of the key, the part that takes actual effect will be just the initial content, so any other bits in the key will be useless, then the situation becomes no different as just using the initial contents as the key.2.10Plaintext bits:  `1001 0010 0110 1101 1001 0010 0110`Ciphertext bits: `1011 1100 0011 0001 0010 1011 0001` So we can get the key stream bits: 0010 1110 0101 1100 1011 1001 0111.We can clearly observe its repetend: 0010111. Let’s suppose it’s generated by a primitive polynomial, then the degree should be $m=\\log_2{(7+1)}=3$. Next we test if there are indeed $2^m-1=7$ sequence states. As for the key stream bits, the states are as follows:\\[\\begin{array}{|c|c c c|}\\text{Clk} &amp; FF_2 &amp; FF_1 &amp; FF_0=s_i \\\\0 &amp; 1 &amp; 0 &amp; 0 \\\\1 &amp; 0 &amp; 1 &amp; 0 \\\\2 &amp; 1 &amp; 0 &amp; 1 \\\\3 &amp; 1 &amp; 1 &amp; 0 \\\\4 &amp; 1 &amp; 1 &amp; 1 \\\\5 &amp; 0 &amp; 1 &amp; 1 \\\\6 &amp; 0 &amp; 0 &amp; 1 \\\\7 &amp; 1 &amp; 0 &amp; 0 \\\\\\end{array}\\\\\\]We can see that there are 7 sequence states(the sequence length is 7). Therefore, it’s possible, that the LFSR could be using a primitive polynomial of degree 3.  Note that we can never know if the key stream contains a larger repetend. Using the given information, we can only be sure that an LFSR using a primitive polynomial of degree 3 could be a possible scenario. There is a possibility that an LFSR using a polynomial of a larger degree is actually used. Specifically for this problem, I’ll just assume the degree is 3.(1) What is the degree m of the key stream generator?It’s 3.(2) What is the initialization vector?It’s 100.(3) Determine the feedback coefficients of the LFSR.To break the cipher we only need to use $2m=6$ key stream bits, let’s grab the first 6 bits of the key stream. Let the coefficients be $p_0,p_1,p_2$, then we have:\\[s_3=s_0p_0+s_1p_1+s_2p_2\\\\s_4=s_1p_0+s_2p_1+s_3p_2\\\\s_5=s_2p_0+s_3p_1+s_4p_2\\]which can be denoted as:\\[\\begin{bmatrix}0 &amp; 0 &amp; 1\\\\0 &amp; 1 &amp; 0\\\\1 &amp; 0 &amp; 1\\end{bmatrix}\\begin{bmatrix}p_0\\\\ p_1\\\\p_2\\end{bmatrix}=\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}\\]We can calculate $P$ by:\\[\\begin{aligned}P=\\begin{bmatrix}p_0\\\\ p_1\\\\p_2\\end{bmatrix}&amp;=\\begin{bmatrix}0 &amp; 0 &amp; 1\\\\0 &amp; 1 &amp; 0\\\\1 &amp; 0 &amp; 1\\end{bmatrix}^{-1}\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}\\\\&amp;=\\begin{bmatrix}-1&amp;0&amp;1\\\\0&amp;1&amp;0\\\\1&amp;0&amp;0\\end{bmatrix}\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}\\\\&amp;=\\begin{bmatrix}1\\\\1\\\\0\\end{bmatrix}\\end{aligned}\\]So the coefficients are: $p_0=1,p_1=1,p_2=0$, the polynomial used is $x^3+x+1$.(4.a)I don’t want to draw the circuit diagram :P(4.b)I wrote a script to help with the key stream generation and the coefficient verification, see the corresponding solution script for more detail.2.11I find it quite annoying that these problems do not make it clear which endianness should be used :(For detailed solution to this problem, see the solution script.chapt2&gt; py .\\p2.11.pybit order: old --&gt; newcipher bits:010011111100000110100010000011010011110000001known plain bits:101100111101000known key stream bits:111111000001000init vec:111111A:[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]b:[0, 0, 0, 0, 0, 1]x:[1, 1, 0, 0, 0, 0]poly:[0, 1, 6]recovered key stream bits:111111000001000011000101001111010001110010010recovered plain bits:101100111101000101100111001100000010000010011recovered plain text:wpiwombat(1) The initialization vector is 111111.(2) The feedback coefficients are $p_0=1,p_1=1,p_{2,3,4,5}=0$, the polynomial is (0, 1, 6).(3) The whole plain text is wpiwombat.(4) Wombats are short-legged, muscular quadrupedal marsupials that are native to Australia.(5) Known-plaintext attack.2.12I implemented an ugly but straightforward version of Trivium using Python, based on the following diagram:The solution script:class Trivium(object):    def __init__(self, iv, key):        self.A = iv &amp; (2**80-1)        self.B = key &amp; (2**80-1)        self.C = 0b111 &lt;&lt; 108    def gen_seq(self, n):        def _bit(n, bit): return (n &gt;&gt; (bit-1)) &amp; 1        A, B, C = self.A, self.B, self.C        outputs = []        for r in range(n):            Ao1 = _bit(A, 66)            Ao2 = _bit(A, 93)            Ao3 = _bit(A, 91) &amp; _bit(A, 92)            Ao = Ao1 ^ Ao2 ^ Ao3            Bo1 = _bit(B, 69)            Bo2 = _bit(B, 84)            Bo3 = _bit(B, 82) &amp; _bit(B, 83)            Bo = Bo1 ^ Bo2 ^ Bo3            Co1 = _bit(C, 66)            Co2 = _bit(C, 111)            Co3 = _bit(C, 109) &amp; _bit(C, 110)            Co = Co1 ^ Co2 ^ Co3            output = Ao ^ Bo ^ Co            outputs.append(output)            Ai1 = _bit(A, 69)            Ai2 = Co            Ai = Ai1 ^ Ai2            Bi1 = _bit(B, 78)            Bi2 = Ao            Bi = Bi1 ^ Bi2            Ci1 = _bit(C, 87)            Ci2 = Bo            Ci = Ci1 ^ Ci2            A = ((A &lt;&lt; 1) &amp; (2**93-1)) | Ai            B = ((B &lt;&lt; 1) &amp; (2**84-1)) | Bi            C = ((C &lt;&lt; 1) &amp; (2**111-1)) | Ci        self.A, self.B, self.C = A, B, C        return outputstrivium = Trivium(0, 0)seq = trivium.gen_seq(70)print(seq)It outputs as follows:chapt2&gt; py .\\p2.12.py[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]So the first 70 bits are $s_0=0,s_{1,2}=1,s_{3,4,…,66}=0,s_{67,68}=1,s_{69}=0$.",
            "content_html": "<ul id=\"markdown-toc\">  <li><a href=\"#intro\" id=\"markdown-toc-intro\">Intro</a></li>  <li><a href=\"#problems\" id=\"markdown-toc-problems\">Problems</a>    <ul>      <li><a href=\"#21\" id=\"markdown-toc-21\">2.1</a></li>      <li><a href=\"#22\" id=\"markdown-toc-22\">2.2</a></li>      <li><a href=\"#23\" id=\"markdown-toc-23\">2.3</a></li>      <li><a href=\"#24\" id=\"markdown-toc-24\">2.4</a></li>      <li><a href=\"#25\" id=\"markdown-toc-25\">2.5</a></li>      <li><a href=\"#26\" id=\"markdown-toc-26\">2.6</a></li>      <li><a href=\"#27\" id=\"markdown-toc-27\">2.7</a></li>      <li><a href=\"#28\" id=\"markdown-toc-28\">2.8</a></li>      <li><a href=\"#29\" id=\"markdown-toc-29\">2.9</a></li>      <li><a href=\"#210\" id=\"markdown-toc-210\">2.10</a></li>      <li><a href=\"#211\" id=\"markdown-toc-211\">2.11</a></li>      <li><a href=\"#212\" id=\"markdown-toc-212\">2.12</a></li>    </ul>  </li></ul><h2 id=\"intro\">Intro</h2><p>My solutions to the practice problems in “Understanding Cryptography: A Textbook for Students and Practitioners - Chapter 2”.</p><p>The solution scripts to some of the problems have been uploaded to GitHub, you can check them out at: <a href=\"https://github.com/yype/UnderstandingCrypto\" target=\"_blank\">https://github.com/yype/UnderstandingCrypto</a>.</p><h2 id=\"problems\">Problems</h2><h3 id=\"21\">2.1</h3><p>(1) The key could look like a stream of letters from A~Z, which represent keys between 0~25.</p>\\[y_i=e_{k_i}(x_i)=x_i+k_i\\bmod26\\\\x_i=d_{k_i}(y_i)=y_i-k_i\\bmod26\\\\\\]<p>(2) I found this problem strange at first, and later, according to the Internet, I found that the key provided in the book is wrong. The correct key should be <code class=\"highlighter-rouge\">rsidpy dkawoy</code>.</p><p>Solution script:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"s\">'bsaspp kkuosp'</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s\">'rsidpy dkawoy'</span>  <span class=\"c1\"># the key in the book is wrong</span><span class=\"n\">dec</span> <span class=\"o\">=</span> <span class=\"s\">''</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">)):</span>    <span class=\"k\">if</span> <span class=\"n\">enc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s\">' '</span><span class=\"p\">:</span>        <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"o\">-</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">),</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"o\">-</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span>        <span class=\"n\">dec</span> <span class=\"o\">+=</span> <span class=\"nb\">chr</span><span class=\"p\">(((</span><span class=\"n\">e</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">))</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"n\">dec</span> <span class=\"o\">+=</span> <span class=\"s\">' '</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dec</span><span class=\"p\">)</span></code></pre></div></div><p>Output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kaspar hauser</code></pre></div></div><p>(3) According to <a href=\"https://en.wikipedia.org/wiki/Kaspar_Hauser\">this</a>, it seems that Hauser died of a fatal stab wound on 17 December 1833.</p><h3 id=\"22\">2.2</h3><p>(1) Life cycle of the key: Every single bit in the key should never be reused.</p><p>(2) Storage of the key during the life cycle: The key must be stored at both the sending and receiving end.</p><p>(3) Storage of the key after the life cycle: They must be destroyed since all former encrypted data will become vulunerable if these keys are leaked in the future.</p><p>(4) Key distribution: The safest way, in my point of view, is to make only 2 copies of the key in the world, and to distribute the keys physically(without being intercepted by any 3rd parties).</p><p>(5) Generation of the key: A TRNG should be used. Or else it will be the same as using a normal stream cipher along with a PRNG, and just distributing the key of the PRNG.</p><h3 id=\"23\">2.3</h3><p>When 128 bits of the plaintext($x_0$~$x_{127}$) and their corresponding cipher bits($y_0$~$y_{127}$) are known to an attacker, he/she/it can easily calculate the key bits($k_0$~$k_{127}$) used in the encryption process:</p>\\[k_i=x_i\\oplus y_i,i=0,1,...,127\\]<h3 id=\"24\">2.4</h3><p>The attacker will have no idea which key should be correct, so any brute-force attack is meaningless. Each key guessed can be used to decrypt the ciphertext, generating a plaintext(plaindata). There is no way the attacker can know which key is right and if the plaintext decrypted is the original one.</p><h3 id=\"25\">2.5</h3><p>(1)</p>\\[(c_2=1,c_1=0,c_0=1)\\\\\\text{}\\\\\\begin{array}{|c|c c c|}\\text{Clk} &amp; FF_2 &amp; FF_1 &amp; FF_0=s_i \\\\0 &amp; 1 &amp; 0 &amp; 0 \\\\1 &amp; 1 &amp; 1 &amp; 0 \\\\2 &amp; 1 &amp; 1 &amp; 1 \\\\3 &amp; 0 &amp; 1 &amp; 1 \\\\4 &amp; 1 &amp; 0 &amp; 1 \\\\5 &amp; 0 &amp; 1 &amp; 0 \\\\6 &amp; 0 &amp; 0 &amp; 1 \\\\7 &amp; 1 &amp; 0 &amp; 0 \\\\\\end{array}\\\\\\]<p>So the sequence is (<code class=\"highlighter-rouge\">0011101</code>)*.</p><p>(2)</p>\\[(c_2=1,c_1=0,c_0=1)\\\\\\text{}\\\\\\begin{array}{|c|c c c|}\\text{Clk} &amp; FF_2 &amp; FF_1 &amp; FF_0=s_i \\\\0 &amp; 0 &amp; 1 &amp; 1 \\\\1 &amp; 1 &amp; 0 &amp; 1 \\\\2 &amp; 0 &amp; 1 &amp; 0 \\\\3 &amp; 0 &amp; 0 &amp; 1 \\\\4 &amp; 1 &amp; 0 &amp; 0 \\\\5 &amp; 1 &amp; 1 &amp; 0 \\\\6 &amp; 1 &amp; 1 &amp; 1 \\\\7 &amp; 0 &amp; 1 &amp; 1 \\\\\\end{array}\\\\\\]<p>So the sequence is (<code class=\"highlighter-rouge\">1101001</code>)*.</p><p>(3) <strong>a)</strong> Their periods are the same. <strong>b)</strong> <code class=\"highlighter-rouge\">S2</code> can be viewed as <code class=\"highlighter-rouge\">ROL(S1, 3)</code>, where <code class=\"highlighter-rouge\">S1/S2</code> represent the repetends of the first and second sequence.</p><h3 id=\"26\">2.6</h3><p>One possible attack: I will need to know 25 bytes(letters), which is <code class=\"highlighter-rouge\">200(bits) / 8(bits/byte)</code>, of the ciphertext and their corresponding plaintext. Then I will be able to calculate 200 bits of the key sequence used($k_i=\\text{plainbit}_i\\oplus\\text{cipherbit}_i$).</p><p>After that, all left to do is to determine the actual keysize. We can simply run several brute-force decryptions, starting from the first plaintext bit we know, using the first $k$ bits of the 200 key bits calculated, where $k=150,151,…,200$.</p><p>It should be noted that if the keysize used is not correct, there is a great chance that the data decrypted is not readable(printable) ASCII text. As a result, once we successfully decrypt the ciphertext and get a readable plaintext after the 25th byte, we know what the actual keysize is.</p><h3 id=\"27\">2.7</h3><p>The chosen LFSR’s polynomial is <code class=\"highlighter-rouge\">(0,1,3,4,8)</code>. I wrote a simple script to help me with the calculation, and the resulting first two output bytes can be viewed as a little endian number <code class=\"highlighter-rouge\">0x90ff</code>.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>chapt2&gt; py .\\p2.7.py0x90ff</code></pre></div></div><h3 id=\"28\">2.8</h3><p>(1) Draw the corresponding LFSR for each of the three polynomials.</p><p>I don’t want to draw them :P</p><p>(2) I wrote a script to calculate all the possible initial values and their corresponding sequence lengh, it outputs as follows:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>chapt2&gt; py .\\p2.8.pyPolynomial: (0, 1, 4)init            len(seq)1               152               153               154               155               156               157               158               159               1510              1511              1512              1513              1514              1515              15Polynomial: (0, 2, 4)init            len(seq)1               62               63               64               65               66               37               68               69               610              611              312              613              314              615              6Polynomial: (0, 1, 2, 3, 4)init            len(seq)1               52               53               54               55               56               57               58               59               510              511              512              513              514              515              5</code></pre></div></div><p>We can see that, the first polynomial $x^4+x+1$ can generate a maximum-length($2^4-1=15$) sequence, so it is a primitive polynomial. The second polynomial $x^4+x^2+1$ does not generate a maximum-length sequence and its sequence length depends on its initial value, so it is an irreducible polynomial. The third polynomial $x^4+x^3+x^2+x+1$ does not generate a maximum-length sequence, but its sequence length stays the same despite the changing initial value, so it is a reducible polynomial.</p><h3 id=\"29\">2.9</h3><p>(1) $256\\times2=512\\text{(bits)}$.</p><p>(2) Let the known plaintext bits be given by $x_0,x_1,…,x_{511}$ and the corresponding ciphertext bits by $y_0,y_1,…,y_{511}$. With these 512 pairs of plaintext and ciphertext bits, we can reconstruct the first 512 key stream bits:</p>\\[s_i=x_i\\oplus y_i,i=0,1,...,511\\]<p>Our goal is to find the key bits given by the feedback coefficients $p_i$. The relationship between the unknown key bits $p_i$ and the key stream bits $s_i$ can be described as follows:</p>\\[s_{i+256}=\\sum_{j=0}^{255}{p_j\\cdot s_{i+j}}, i=0,1,...,255\\]<p>This actually represents 256 linearly independent formulae, which contain 256 unknown variables $p_0,p_1,…,p_255$. This system can be easily solved using Gaussian elimination, matrix inversion or any other algorithm for solving systems of linear equations.</p><p>(3.a) The key is $p_0,p_1,…,p_{255}$.</p><p>(3.b) If we use the initial contents of the LFSR as the key, the attacker can get the key almost without performing any attack since the first 256 bits of the <strong>key stream bits</strong> are exactly the same as the initial content bits. If we use the initial contents of the LFSR as part of the key, the part that takes actual effect will be just the initial content, so any other bits in the key will be useless, then the situation becomes no different as just using the initial contents as the key.</p><h3 id=\"210\">2.10</h3><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Plaintext bits:  `1001 0010 0110 1101 1001 0010 0110`Ciphertext bits: `1011 1100 0011 0001 0010 1011 0001` </code></pre></div></div><p>So we can get the key stream bits: <code class=\"highlighter-rouge\">0010 1110 0101 1100 1011 1001 0111</code>.</p><p>We can clearly observe its repetend: <code class=\"highlighter-rouge\">0010111</code>. Let’s suppose it’s generated by a primitive polynomial, then the degree should be $m=\\log_2{(7+1)}=3$. Next we test if there are indeed $2^m-1=7$ sequence states. As for the key stream bits, the states are as follows:</p>\\[\\begin{array}{|c|c c c|}\\text{Clk} &amp; FF_2 &amp; FF_1 &amp; FF_0=s_i \\\\0 &amp; 1 &amp; 0 &amp; 0 \\\\1 &amp; 0 &amp; 1 &amp; 0 \\\\2 &amp; 1 &amp; 0 &amp; 1 \\\\3 &amp; 1 &amp; 1 &amp; 0 \\\\4 &amp; 1 &amp; 1 &amp; 1 \\\\5 &amp; 0 &amp; 1 &amp; 1 \\\\6 &amp; 0 &amp; 0 &amp; 1 \\\\7 &amp; 1 &amp; 0 &amp; 0 \\\\\\end{array}\\\\\\]<p>We can see that there are 7 sequence states(the sequence length is 7). Therefore, <em>it’s possible</em>, that the LFSR could be using a primitive polynomial of degree 3.</p><blockquote>  <p>Note that we can never know if the key stream contains a larger repetend. Using the given information, we can only be sure that <em>an LFSR using a primitive polynomial of degree 3</em> could be a possible scenario. There is a possibility that an LFSR using a polynomial of a larger degree is actually used. Specifically for this problem, I’ll just assume the degree is 3.</p></blockquote><p>(1) What is the degree m of the key stream generator?</p><p>It’s 3.</p><p>(2) What is the initialization vector?</p><p>It’s <code class=\"highlighter-rouge\">100</code>.</p><p>(3) Determine the feedback coefficients of the LFSR.</p><p>To break the cipher we only need to use $2m=6$ key stream bits, let’s grab the first 6 bits of the key stream. Let the coefficients be $p_0,p_1,p_2$, then we have:</p>\\[s_3=s_0p_0+s_1p_1+s_2p_2\\\\s_4=s_1p_0+s_2p_1+s_3p_2\\\\s_5=s_2p_0+s_3p_1+s_4p_2\\]<p>which can be denoted as:</p>\\[\\begin{bmatrix}0 &amp; 0 &amp; 1\\\\0 &amp; 1 &amp; 0\\\\1 &amp; 0 &amp; 1\\end{bmatrix}\\begin{bmatrix}p_0\\\\ p_1\\\\p_2\\end{bmatrix}=\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}\\]<p>We can calculate $P$ by:</p>\\[\\begin{aligned}P=\\begin{bmatrix}p_0\\\\ p_1\\\\p_2\\end{bmatrix}&amp;=\\begin{bmatrix}0 &amp; 0 &amp; 1\\\\0 &amp; 1 &amp; 0\\\\1 &amp; 0 &amp; 1\\end{bmatrix}^{-1}\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}\\\\&amp;=\\begin{bmatrix}-1&amp;0&amp;1\\\\0&amp;1&amp;0\\\\1&amp;0&amp;0\\end{bmatrix}\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix}\\\\&amp;=\\begin{bmatrix}1\\\\1\\\\0\\end{bmatrix}\\end{aligned}\\]<p>So the coefficients are: $p_0=1,p_1=1,p_2=0$, the polynomial used is $x^3+x+1$.</p><p>(4.a)</p><p>I don’t want to draw the circuit diagram :P</p><p>(4.b)</p><p>I wrote a script to help with the key stream generation and the coefficient verification, see the corresponding solution script for more detail.</p><h3 id=\"211\">2.11</h3><p>I find it quite annoying that these problems do not make it clear which endianness should be used :(</p><p>For detailed solution to this problem, see the solution script.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>chapt2&gt; py .\\p2.11.pybit order: old --&gt; newcipher bits:010011111100000110100010000011010011110000001known plain bits:101100111101000known key stream bits:111111000001000init vec:111111A:[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]b:[0, 0, 0, 0, 0, 1]x:[1, 1, 0, 0, 0, 0]poly:[0, 1, 6]recovered key stream bits:111111000001000011000101001111010001110010010recovered plain bits:101100111101000101100111001100000010000010011recovered plain text:wpiwombat</code></pre></div></div><p>(1) The initialization vector is <code class=\"highlighter-rouge\">111111</code>.</p><p>(2) The feedback coefficients are $p_0=1,p_1=1,p_{2,3,4,5}=0$, the polynomial is <code class=\"highlighter-rouge\">(0, 1, 6)</code>.</p><p>(3) The whole plain text is <code class=\"highlighter-rouge\">wpiwombat</code>.</p><p>(4) <a href=\"https://en.wikipedia.org/wiki/Wombat\" target=\"_blank\">Wombats are short-legged, muscular quadrupedal marsupials that are native to Australia.</a></p><p>(5) Known-plaintext attack.</p><h3 id=\"212\">2.12</h3><p>I implemented an ugly but straightforward version of Trivium using Python, based on the following diagram:</p><p><img src=\"/assets/UnderstandingCrypto/chapt2/MyTrivium.png\" alt=\"MyTrivium\" /></p><p>The solution script:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Trivium</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">iv</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">iv</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">80</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">key</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">80</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"mb\">0b111</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">108</span>    <span class=\"k\">def</span> <span class=\"nf\">gen_seq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>        <span class=\"k\">def</span> <span class=\"nf\">_bit</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">bit</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">bit</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span>        <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">C</span>        <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>        <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>            <span class=\"n\">Ao1</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">)</span>            <span class=\"n\">Ao2</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">)</span>            <span class=\"n\">Ao3</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">)</span>            <span class=\"n\">Ao</span> <span class=\"o\">=</span> <span class=\"n\">Ao1</span> <span class=\"o\">^</span> <span class=\"n\">Ao2</span> <span class=\"o\">^</span> <span class=\"n\">Ao3</span>            <span class=\"n\">Bo1</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">)</span>            <span class=\"n\">Bo2</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">84</span><span class=\"p\">)</span>            <span class=\"n\">Bo3</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">)</span>            <span class=\"n\">Bo</span> <span class=\"o\">=</span> <span class=\"n\">Bo1</span> <span class=\"o\">^</span> <span class=\"n\">Bo2</span> <span class=\"o\">^</span> <span class=\"n\">Bo3</span>            <span class=\"n\">Co1</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">)</span>            <span class=\"n\">Co2</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">111</span><span class=\"p\">)</span>            <span class=\"n\">Co3</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">109</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">)</span>            <span class=\"n\">Co</span> <span class=\"o\">=</span> <span class=\"n\">Co1</span> <span class=\"o\">^</span> <span class=\"n\">Co2</span> <span class=\"o\">^</span> <span class=\"n\">Co3</span>            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">Ao</span> <span class=\"o\">^</span> <span class=\"n\">Bo</span> <span class=\"o\">^</span> <span class=\"n\">Co</span>            <span class=\"n\">outputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>            <span class=\"n\">Ai1</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">)</span>            <span class=\"n\">Ai2</span> <span class=\"o\">=</span> <span class=\"n\">Co</span>            <span class=\"n\">Ai</span> <span class=\"o\">=</span> <span class=\"n\">Ai1</span> <span class=\"o\">^</span> <span class=\"n\">Ai2</span>            <span class=\"n\">Bi1</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">)</span>            <span class=\"n\">Bi2</span> <span class=\"o\">=</span> <span class=\"n\">Ao</span>            <span class=\"n\">Bi</span> <span class=\"o\">=</span> <span class=\"n\">Bi1</span> <span class=\"o\">^</span> <span class=\"n\">Bi2</span>            <span class=\"n\">Ci1</span> <span class=\"o\">=</span> <span class=\"n\">_bit</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">)</span>            <span class=\"n\">Ci2</span> <span class=\"o\">=</span> <span class=\"n\">Bo</span>            <span class=\"n\">Ci</span> <span class=\"o\">=</span> <span class=\"n\">Ci1</span> <span class=\"o\">^</span> <span class=\"n\">Ci2</span>            <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">A</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">93</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">|</span> <span class=\"n\">Ai</span>            <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">B</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">84</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">|</span> <span class=\"n\">Bi</span>            <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">C</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">111</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">|</span> <span class=\"n\">Ci</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span>        <span class=\"k\">return</span> <span class=\"n\">outputs</span><span class=\"n\">trivium</span> <span class=\"o\">=</span> <span class=\"n\">Trivium</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">trivium</span><span class=\"o\">.</span><span class=\"n\">gen_seq</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">)</span></code></pre></div></div><p>It outputs as follows:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>chapt2&gt; py .\\p2.12.py[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]</code></pre></div></div><p>So the first 70 bits are $s_0=0,s_{1,2}=1,s_{3,4,…,66}=0,s_{67,68}=1,s_{69}=0$.</p>",
            "url": "http://localhost:4000/2021/01/26/answers-to-understanding-cryptography-problems-chapter2",
            
            
            
            "tags": ["Crypto","Understanding Cryptography"],
            
            "date_published": "2021-01-26T00:00:00+08:00",
            "date_modified": "2021-01-26T00:00:00+08:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2021/01/25/answers-to-understanding-cryptography-problems-chapter1",
            "title": "Solutions to Understanding Cryptography Problems - Chapter 1",
            "summary": null,
            "content_text": "  Intro  Problems          1.1      1.2      1.3      1.4      1.5      1.6      1.7      1.8      1.9      1.10      1.11      1.12      1.13      1.14      IntroMy solutions to the practice problems in “Understanding Cryptography: A Textbook for Students and Practitioners - Chapter 1”.The solution scripts to some of the problems have been uploaded to GitHub, you can check them out at: https://github.com/yype/UnderstandingCrypto.Problems1.1(1) Compute the relative frequency of all letters in the ciphertext.[('r', 0.13003095975232198), ('b', 0.10526315789473684), ('m', 0.09597523219814241), ('k', 0.07585139318885449), ('j', 0.07430340557275542), ('w', 0.07275541795665634), ('i', 0.06346749226006192), ('p', 0.04643962848297214), ('u', 0.03715170278637771), ('d', 0.03560371517027864), ('h', 0.03560371517027864), ('v', 0.034055727554179564), ('x', 0.030959752321981424), ('y', 0.029411764705882353), ('n', 0.02631578947368421), ('s', 0.02631578947368421), ('t', 0.020123839009287926), ('l', 0.01238390092879257), ('q', 0.010835913312693499), ('o', 0.010835913312693499), ('e', 0.007739938080495356), ('a', 0.007739938080495356), ('c', 0.007739938080495356), ('f', 0.0015479876160990713), ('g', 0.0015479876160990713)](2) Decrypt the ciphertext.because the practice of the basic movements of kata isthe focus and mastery of self is the essence ofmatsubayashi ryu karate do i shall try to elucidate themovements of the kata according to my interpretationbased on forty years of studyit is not an easy task to explain each movement and itssignificance and some must remain unexplained to give acomplete explanation one would have to be qualified andinspired to such an extent that he could reach the stateof enlightened mind capable of recognizing soundlesssound and shapeless shape i do not deem myself the finalauthority but my experience with kata has left no doubtthat the following is the proper application andinterpretation i offer my theories in the hope that theessence of okinawan karate will remain intactThe decryption process involves a little bit of manual tweaking, as can be seen in the solution script output:Freqs in the text -&gt; freqs of letters in the alphabet('r', 0.13003095975232198) -&gt; ('e', 0.127)('b', 0.10526315789473684) -&gt; ('t', 0.0906)('m', 0.09597523219814241) -&gt; ('a', 0.0817)('k', 0.07585139318885449) -&gt; ('o', 0.0751)('j', 0.07430340557275542) -&gt; ('i', 0.0697)('w', 0.07275541795665634) -&gt; ('n', 0.0675)('i', 0.06346749226006192) -&gt; ('s', 0.0633)('p', 0.04643962848297214) -&gt; ('h', 0.0609)('u', 0.03715170278637771) -&gt; ('r', 0.0599)('d', 0.03560371517027864) -&gt; ('d', 0.0425)('h', 0.03560371517027864) -&gt; ('l', 0.0403)('v', 0.034055727554179564) -&gt; ('c', 0.0278)('x', 0.030959752321981424) -&gt; ('u', 0.0276)('y', 0.029411764705882353) -&gt; ('m', 0.02414)('n', 0.02631578947368421) -&gt; ('w', 0.0236)('s', 0.02631578947368421) -&gt; ('f', 0.0223)('t', 0.020123839009287926) -&gt; ('g', 0.0202)('l', 0.01238390092879257) -&gt; ('y', 0.0197)('q', 0.010835913312693499) -&gt; ('p', 0.0193)('o', 0.010835913312693499) -&gt; ('b', 0.015)('e', 0.007739938080495356) -&gt; ('v', 0.0098)('a', 0.007739938080495356) -&gt; ('k', 0.0077)('c', 0.007739938080495356) -&gt; ('j', 0.0015)('f', 0.0015479876160990713) -&gt; ('x', 0.0015)('g', 0.0015479876160990713) -&gt; ('q', 0.001)Trying to decipher:yecawse the fractnce iu the yasnc mivemeots iu pata nsthe uicws aod masterg iu selu ns the esseoce iumatswyagashn rgw parate di n shall trg ti elwcndate themivemeots iu the pata accirdnob ti mg noterfretatnioyased io uirtg gears iu stwdgnt ns oit ao easg tasp ti ekflano each mivemeot aod ntssnbonuncaoce aod sime mwst remano woekflanoed ti bnve acimflete ekflaoatnio ioe jiwld have ti ye xwalnuned aodnosfnred ti swch ao ekteot that he ciwld reach the stateiu eolnbhteoed mnod cafayle iu recibonqnob siwodlesssiwod aod shafeless shafe n di oit deem mgselu the unoalawthirntg ywt mg ekferneoce jnth pata has leut oi diwytthat the uillijnob ns the frifer afflncatnio aodnoterfretatnio n iuuer mg theirnes no the hife that theesseoce iu ipnoajao parate jnll remano notactDoing corrections manually:l -&gt; y ==&gt; l -&gt; b        Conflit: l -&gt; b        Conflit: o -&gt; bq -&gt; p ==&gt; q -&gt; k        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kt -&gt; g ==&gt; t -&gt; y        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kn -&gt; w ==&gt; n -&gt; u        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kw -&gt; n ==&gt; w -&gt; i        Conflit: j -&gt; i        Conflit: w -&gt; i        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kj -&gt; i ==&gt; j -&gt; o        Conflit: k -&gt; o        Conflit: j -&gt; o        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kk -&gt; o ==&gt; k -&gt; n        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; ks -&gt; f ==&gt; s -&gt; p        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kc -&gt; j ==&gt; c -&gt; w        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kx -&gt; u ==&gt; x -&gt; f        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; ka -&gt; k ==&gt; a -&gt; x        Conflit: l -&gt; b        Conflit: o -&gt; b        Conflit: a -&gt; x        Conflit: f -&gt; xo -&gt; b ==&gt; o -&gt; g        Conflit: a -&gt; x        Conflit: f -&gt; xg -&gt; q ==&gt; g -&gt; z        Conflit: a -&gt; x        Conflit: f -&gt; xf -&gt; x ==&gt; f -&gt; q        Check okCorresponding words:[('lrvmnir', 'because'), ('bpr', 'the'), ('sumvbwvr', 'practice'), ('jx', 'of'), ('bpr', 'the'), ('lmiwv', 'basic'), ('yjeryrkbi', 'movements'), ('jx', 'of'), ('qmbm', 'kata'), ('wi', 'is'), ('bpr', 'the'), ('xjvni', 'focus'), ('mkd', 'and'), ('ymibrut', 'mastery'), ('jx', 'of'), ('irhx', 'self'), ('wi', 'is'), ('bpr', 'the'), ('riirkvr', 'essence'), ('jx', 'of'), ('ymbinlmtmipw', 'matsubayashi'), ('utn', 'ryu'), ('qmumbr', 'karate'), ('dj', 'do'), ('w', 'i'), ('ipmhh', 'shall'), ('but', 'try'), ('bj', 'to'), ('rhnvwdmbr', 'elucidate'), ('bpr', 'the'), ('yjeryrkbi', 'movements'), ('jx', 'of'), ('bpr', 'the'), ('qmbm', 'kata'), ('mvvjudwko', 'according'), ('bj', 'to'), ('yt', 'my'), ('wkbrusurbmbwjk', 'interpretation'), ('lmird', 'based'), ('jk', 'on'), ('xjubt', 'forty'), ('trmui', 'years'), ('jx', 'of'), ('ibndt', 'study'), ('wb', 'it'), ('wi', 'is'), ('kjb', 'not'), ('mk', 'an'), ('rmit', 'easy'), ('bmiq', 'task'), ('bj', 'to'), ('rashmwk', 'explain'), ('rmvp', 'each'), ('yjeryrkb', 'movement'), ('mkd', 'and'), ('wbi', 'its'), ('iwokwxwvmkvr', 'significance'), ('mkd', 'and'), ('ijyr', 'some'), ('ynib', 'must'), ('urymwk', 'remain'), ('nkrashmwkrd', 'unexplained'), ('bj', 'to'), ('ower', 'give'), ('m', 'a'), ('vjyshrbr', 'complete'), ('rashmkmbwjk', 'explanation'), ('jkr', 'one'), ('cjnhd', 'would'), ('pmer', 'have'), ('bj', 'to'), ('lr', 'be'), ('fnmhwxwrd', 'qualified'), ('mkd', 'and'), ('wkiswurd', 'inspired'), ('bj', 'to'), ('invp', 'such'), ('mk', 'an'), ('rabrkb', 'extent'), ('bpmb', 'that'), ('pr', 'he'), ('vjnhd', 'could'), ('urmvp', 'reach'), ('bpr', 'the'), ('ibmbr', 'state'), ('jx', 'of'), ('rkhwopbrkrd', 'enlightened'), ('ywkd', 'mind'), ('vmsmlhr', 'capable'), ('jx', 'of'), ('urvjokwgwko', 'recognizing'), ('ijnkdhrii', 'soundless'), ('ijnkd', 'sound'), ('mkd', 'and'), ('ipmsrhrii', 'shapeless'), ('ipmsr', 'shape'), ('w', 'i'), ('dj', 'do'), ('kjb', 'not'), ('drry', 'deem'), ('ytirhx', 'myself'), ('bpr', 'the'), ('xwkmh', 'final'), ('mnbpjuwbt', 'authority'), ('lnb', 'but'), ('yt', 'my'), ('rasruwrkvr', 'experience'), ('cwbp', 'with'), ('qmbm', 'kata'), ('pmi', 'has'), ('hrxb', 'left'), ('kj', 'no'), ('djnlb', 'doubt'), ('bpmb', 'that'), ('bpr', 'the'), ('xjhhjcwko', 'following'), ('wi', 'is'), ('bpr', 'the'), ('sujsru', 'proper'), ('msshwvmbwjk', 'application'), ('mkd', 'and'), ('wkbrusurbmbwjk', 'interpretation'), ('w', 'i'), ('jxxru', 'offer'), ('yt', 'my'), ('bprjuwri', 'theories'), ('wk', 'in'), ('bpr', 'the'), ('pjsr', 'hope'), ('bpmb', 'that'), ('bpr', 'the'), ('riirkvr', 'essence'), ('jx', 'of'), ('jqwkmcmk', 'okinawan'), ('qmumbr', 'karate'), ('cwhh', 'will'), ('urymwk', 'remain'), ('wkbmvb', 'intact')]Deciphered text:because the practice of the basic movements of kata isthe focus and mastery of self is the essence ofmatsubayashi ryu karate do i shall try to elucidate themovements of the kata according to my interpretationbased on forty years of studyit is not an easy task to explain each movement and itssignificance and some must remain unexplained to give acomplete explanation one would have to be qualified andinspired to such an extent that he could reach the stateof enlightened mind capable of recognizing soundlesssound and shapeless shape i do not deem myself the finalauthority but my experience with kata has left no doubtthat the following is the proper application andinterpretation i offer my theories in the hope that theessence of okinawan karate will remain intactKey maps:rbmkjwipudhvxynstlqoeacfgetanoishrdlcfmupybkgvxwqzr 0.13003095975232198 -&gt; e 0.127b 0.10526315789473684 -&gt; t 0.0906m 0.09597523219814241 -&gt; a 0.0817k 0.07585139318885449 -&gt; n 0.0675j 0.07430340557275542 -&gt; o 0.0751w 0.07275541795665634 -&gt; i 0.0697i 0.06346749226006192 -&gt; s 0.0633p 0.04643962848297214 -&gt; h 0.0609u 0.03715170278637771 -&gt; r 0.0599d 0.03560371517027864 -&gt; d 0.0425h 0.03560371517027864 -&gt; l 0.0403v 0.034055727554179564 -&gt; c 0.0278x 0.030959752321981424 -&gt; f 0.0223y 0.029411764705882353 -&gt; m 0.02414n 0.02631578947368421 -&gt; u 0.0276s 0.02631578947368421 -&gt; p 0.0193t 0.020123839009287926 -&gt; y 0.0197l 0.01238390092879257 -&gt; b 0.015q 0.010835913312693499 -&gt; k 0.0077o 0.010835913312693499 -&gt; g 0.0202e 0.007739938080495356 -&gt; v 0.0098a 0.007739938080495356 -&gt; x 0.0015c 0.007739938080495356 -&gt; w 0.0236f 0.0015479876160990713 -&gt; q 0.001g 0.0015479876160990713 -&gt; z 0.0007(3) It’s from “Essence of Okinawan Karate-Do” by Shoshin Nagamine.1.2Decipher the following ciphertext encoded with a shift cipher:xultpaajcxitltlxaarpjhtiwtgxktghidhipxciwtvgtpilpitghlxiwiwtxgqadds.(1) First we calculate the frequency of each letter in the ciphertext:[('t', 10), ('i', 9), ('x', 7), ('l', 5), ('p', 5), ('a', 5), ('g', 5), ('h', 4), ('w', 4), ('d', 3), ('j', 2), ('c', 2), ('u', 1), ('r', 1), ('k', 1), ('v', 1), ('q', 1), ('s', 1)]As can be seen, letter t appears mostly in the ciphertext, which corresponds to the mostly appearing letter e in the alphabet. So now we know e has probably been transformed to t, and the shift number is ord('t') - ord('e') which is 15. After trying 15 as the shift number, I successfully deciphered the ciphertext, so I identified only one letter.(2) Using 15 as the shift number:ifweallunitewewillcausetheriverstostainthegreatwaterswiththeirblood.After manually inserting some spaces between words:if we all unite we will cause the rivers to stain the great waters with their blood.(3) It’s from Tecumseh’s speech to the Osages.1.3(1) ASICs that can run in parallel:\\[\\frac{1000000}{(50\\times2)}=10000\\]Seconds it takes to do an average key search:\\[\\frac{2^{128-1}}{(10000\\times5\\times10^8)}=3.40282\\times 10^{25} \\\\3.40282\\times 10^{25} secs \\approx 1.07903\\times 10^{18} years\\]This is much longer than the age of the universe ($\\approx10^8$ times).(2) Represent the number of Moore’s Law iterations as $x$, we can get the following equation:\\[\\frac{2^{128-1}}{\\frac{1000000}{(50\\times2)}\\times(5\\times10^8)\\times2^x}=24\\times60\\times60\\\\x=68.4162\\\\\\frac{18}{12}\\times68.4162\\approx102.624\\ (years)\\]So it’ll take approximately 103 years.1.4(1) Size of the key space that can be constructed be the specified passwords:\\[128^8=2^{56}\\](2) The corresponding key length in bits: $\\log_2{2^{56}}=56$.(3) The corresponding key length in bits when users use only the 26 lowercase letters from the alphabet:\\[\\log_2{26^8}\\approx37.6035\\approx38\\](4) a. 7-bit characters:\\[128^x=2^{128}\\\\(2^7)^x=2^{7x}=2^{128}\\\\x\\approx18.3\\]So it at least requires 19 characters.(4) b. 26 lowercase letters from the alphabet:\\[26^x=2^{128}\\\\x=\\log_{26}{2^{128}}\\\\x\\approx27.2\\]So at least 28 characters are required.1.5(1) $15 \\cdot 29 \\equiv 2\\cdot3 \\equiv 6 \\bmod 13$(2) $2 \\cdot 29 \\equiv 2 \\cdot 3 \\equiv 6 \\bmod 13$(3) $2 \\cdot 3 \\equiv 6 \\bmod 13$(4) $-11 \\cdot 3 \\equiv 2 \\cdot 3 \\equiv 6 \\bmod 13$All members in the same equivalence class behave the same.1.6(1) $1/5\\bmod13=8$(2) $1/5\\bmod7=3$(3) $3\\cdot2/5\\bmod7=4$1.7(1) $\\mathbb{Z}_4$, multiplication table:\\[\\begin{array}{c|c c c c} \\times  &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 0 &amp; 2 &amp; 0 &amp; 2 \\\\ 3 &amp; 0 &amp; 3 &amp; 2 &amp; 1 \\\\ \\end{array}\\](2) $\\mathbb{Z}_5$, addition and multiplication table:\\[\\begin{array}{c|c c c c c} + &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 0 \\\\ 2 &amp; 2 &amp; 3 &amp; 4 &amp; 0 &amp; 1 \\\\ 3 &amp; 3 &amp; 4 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 4 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\\\ \\end{array}\\ \\ \\begin{array}{c|c c c c c} \\times  &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 2 &amp; 0 &amp; 2 &amp; 4 &amp; 1 &amp; 3 \\\\ 3 &amp; 0 &amp; 3 &amp; 1 &amp; 4 &amp; 2 \\\\ 4 &amp; 0 &amp; 4 &amp; 3 &amp; 2 &amp; 1 \\\\ \\end{array}\\](3) $\\mathbb{Z}_6$, addition and multiplication table:\\[\\begin{array}{c|c c c c c c} + &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 0 \\\\ 2 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 1 \\\\ 3 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 2 &amp; 3 \\\\ 5 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 3 &amp; 4 \\\\ \\end{array}\\ \\ \\begin{array}{c|c c c c c c} \\times  &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ 2 &amp; 0 &amp; 2 &amp; 4 &amp; 0 &amp; 2 &amp; 4 \\\\ 3 &amp; 0 &amp; 3 &amp; 0 &amp; 3 &amp; 0 &amp; 3 \\\\ 4 &amp; 0 &amp; 4 &amp; 2 &amp; 0 &amp; 4 &amp; 2 \\\\ 5 &amp; 0 &amp; 5 &amp; 4 &amp; 3 &amp; 2 &amp; 1 \\\\ \\end{array}\\](4) a. In $\\mathbb{Z}_4$, 0 and 2 do not have a multiplicative inverse. In $\\mathbb{Z}_6$, 0, 2, 3 and 4 do not have a multiplicative inverse.(4) b. 5 is a prime number. All non-zero numbers smaller than 5 are coprime to 5.1.8\\[5\\times9\\equiv1\\bmod11\\to5^{-1}\\equiv9\\bmod11\\\\5\\times5\\equiv1\\bmod12\\to5^{-1}\\equiv5\\bmod12\\\\5\\times8\\equiv1\\bmod13\\to5^{-1}\\equiv8\\bmod13\\\\\\]1.9(1) $x=3^2\\bmod13\\equiv9\\bmod13$(2) $x=7^2 \\bmod 13 \\equiv 10 \\bmod 13$(3)\\[\\begin{aligned}x&amp;=3^{10}\\bmod 13\\\\&amp;=3^9\\times3\\bmod13\\\\&amp;=27^3\\times3\\bmod13\\\\&amp; =(13\\times2+1)^3\\times3\\bmod13\\\\&amp;\\equiv1^3\\times3\\bmod13\\\\&amp;\\equiv 3 \\bmod 13\\end{aligned}\\](4)\\[\\begin{aligned}x&amp;=7^{100}\\bmod13\\\\&amp;=(7^2)^{50}\\bmod13\\\\&amp;=(13\\times3+10)^{50}\\bmod13\\\\&amp;\\equiv10^{50}\\bmod13\\\\&amp;=100^{25}\\bmod13\\\\&amp;=(13\\times7+9)^{25}\\bmod 13\\\\&amp;\\equiv9^{25}\\bmod13\\\\&amp;=81^{12}\\times9\\bmod13\\\\&amp;=(13\\times6+3)^{12}\\times9\\bmod13\\\\&amp;\\equiv3^{14}\\bmod13\\\\&amp;=(3^4)^3\\times3^2\\bmod13\\\\&amp;\\equiv3^3\\times3^2\\bmod13\\\\&amp;\\equiv3\\times3\\bmod13\\\\&amp;=9\\bmod13\\end{aligned}\\](5) Through trial &amp; error:\\[7^x=11\\bmod13\\\\x=5\\]1.10\\[\\phi(4)=2,\\phi(5)=4,\\phi(9)=6,\\phi(26)=12\\]1.11(1) See the solution script:# enc: f = 7*x+22 mod 26# dec: x = (f-22)*inv(7,26) mod 26#        = (f-22)*15 mod 26e = 'falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj'm = ''for each in e:    each = ord(each) - ord('a')    each -= 22    each *= 15    each %= 26    each = chr(ord('a') + each)    m += eachprint(m)# first the sentence and then the evidence said the queen(2) Lewis Carroll wrote it in one of his poems.1.12(1)\\[e_k(x)=y=a\\cdot x+b\\bmod30\\\\d_k(y)=x=a^{-1}\\cdot(y-b)\\bmod 30\\\\\\text{Key and Requirements:} \\\\(k=(a,b)\\ \\&amp;\\ gcd(a,30)=1)\\](2)\\[\\phi(30)\\times30=8\\times30=240\\](3) Transform the ciphertext into bias-in-the-alphabet form: (26,20,29,22,29)\\[17^{-1}\\equiv23\\bmod30\\to d(y)=(y-1)\\times23\\bmod30\\\\d(26,20,29,22,29)=(5,17,14,3,14)\\]Transform it back, we get the plaintext: FRODO.(4) Frodo comes from The Shire (Lord Of The Rings character).1.13\\[\\begin{cases}y_1=ax_1+b\\\\y_2=ax_2+b\\end{cases}\\Rightarrow \\begin{cases}b=y_1-ax_1\\\\a=(y_2-y_1)(x_2-x_1)^{-1}\\end{cases}\\pmod N\\\\\\text{(N is the size of the alphabet being encrypted)}\\\\\\text{}\\\\\\text{We should make sure that: }gcd(x_2-x_1,N)=1\\\\\\text{so that }(x_2-x_1)^{-1}\\bmod{N} \\text{ exists}.\\]1.14(1)\\[e_{k2}(e_{k1}(x))=a_2(a_1x+b_1)+b_2=a_1a_2x+a_2b_1+b_2\\pmod{26}\\\\\\text{let }k_3\\equiv(a_1a_2,a_2b_1+b_2)\\pmod{26}\\\\\\text{then }e_{k3}=e_{k2}(e_{k1}(x))\\](2)\\[a_3=a_1a_2\\bmod26=33\\bmod26\\equiv7\\bmod26\\\\b_3=a_2b_1+b_2\\bmod26=11\\times5+7\\bmod26\\equiv10\\bmod26\\\\\\Rightarrow(a_3,b_3)\\equiv(7,10)\\bmod26\\](3) See the solution script:def enc_k1(x):    return (3*x+5) % 26def enc_k2(x):    return (11*x+7) % 26def enc_k3(x):    return (7*x+10) % 26for n in range(26):    if enc_k2(enc_k1(n)) != enc_k3(n):        print('Error!')        exit(1)print('Verified')Output:Verified(4) Searching all $(k_1\\in K,k_2\\in K)$ is equivalent to just searching all $k_3\\in K$. The keyspace does not increase at all by the specified double encryption.",
            "content_html": "<ul id=\"markdown-toc\">  <li><a href=\"#intro\" id=\"markdown-toc-intro\">Intro</a></li>  <li><a href=\"#problems\" id=\"markdown-toc-problems\">Problems</a>    <ul>      <li><a href=\"#11\" id=\"markdown-toc-11\">1.1</a></li>      <li><a href=\"#12\" id=\"markdown-toc-12\">1.2</a></li>      <li><a href=\"#13\" id=\"markdown-toc-13\">1.3</a></li>      <li><a href=\"#14\" id=\"markdown-toc-14\">1.4</a></li>      <li><a href=\"#15\" id=\"markdown-toc-15\">1.5</a></li>      <li><a href=\"#16\" id=\"markdown-toc-16\">1.6</a></li>      <li><a href=\"#17\" id=\"markdown-toc-17\">1.7</a></li>      <li><a href=\"#18\" id=\"markdown-toc-18\">1.8</a></li>      <li><a href=\"#19\" id=\"markdown-toc-19\">1.9</a></li>      <li><a href=\"#110\" id=\"markdown-toc-110\">1.10</a></li>      <li><a href=\"#111\" id=\"markdown-toc-111\">1.11</a></li>      <li><a href=\"#112\" id=\"markdown-toc-112\">1.12</a></li>      <li><a href=\"#113\" id=\"markdown-toc-113\">1.13</a></li>      <li><a href=\"#114\" id=\"markdown-toc-114\">1.14</a></li>    </ul>  </li></ul><h2 id=\"intro\">Intro</h2><p>My solutions to the practice problems in “Understanding Cryptography: A Textbook for Students and Practitioners - Chapter 1”.</p><p>The solution scripts to some of the problems have been uploaded to GitHub, you can check them out at: <a href=\"https://github.com/yype/UnderstandingCrypto\" target=\"_blank\">https://github.com/yype/UnderstandingCrypto</a>.</p><h2 id=\"problems\">Problems</h2><h3 id=\"11\">1.1</h3><p>(1) Compute the relative frequency of all letters in the ciphertext.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('r', 0.13003095975232198), ('b', 0.10526315789473684), ('m', 0.09597523219814241), ('k', 0.07585139318885449), ('j', 0.07430340557275542), ('w', 0.07275541795665634), ('i', 0.06346749226006192), ('p', 0.04643962848297214), ('u', 0.03715170278637771), ('d', 0.03560371517027864), ('h', 0.03560371517027864), ('v', 0.034055727554179564), ('x', 0.030959752321981424), ('y', 0.029411764705882353), ('n', 0.02631578947368421), ('s', 0.02631578947368421), ('t', 0.020123839009287926), ('l', 0.01238390092879257), ('q', 0.010835913312693499), ('o', 0.010835913312693499), ('e', 0.007739938080495356), ('a', 0.007739938080495356), ('c', 0.007739938080495356), ('f', 0.0015479876160990713), ('g', 0.0015479876160990713)]</code></pre></div></div><p>(2) Decrypt the ciphertext.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>because the practice of the basic movements of kata isthe focus and mastery of self is the essence ofmatsubayashi ryu karate do i shall try to elucidate themovements of the kata according to my interpretationbased on forty years of studyit is not an easy task to explain each movement and itssignificance and some must remain unexplained to give acomplete explanation one would have to be qualified andinspired to such an extent that he could reach the stateof enlightened mind capable of recognizing soundlesssound and shapeless shape i do not deem myself the finalauthority but my experience with kata has left no doubtthat the following is the proper application andinterpretation i offer my theories in the hope that theessence of okinawan karate will remain intact</code></pre></div></div><p>The decryption process involves a little bit of manual tweaking, as can be seen in the solution script output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Freqs in the text -&gt; freqs of letters in the alphabet('r', 0.13003095975232198) -&gt; ('e', 0.127)('b', 0.10526315789473684) -&gt; ('t', 0.0906)('m', 0.09597523219814241) -&gt; ('a', 0.0817)('k', 0.07585139318885449) -&gt; ('o', 0.0751)('j', 0.07430340557275542) -&gt; ('i', 0.0697)('w', 0.07275541795665634) -&gt; ('n', 0.0675)('i', 0.06346749226006192) -&gt; ('s', 0.0633)('p', 0.04643962848297214) -&gt; ('h', 0.0609)('u', 0.03715170278637771) -&gt; ('r', 0.0599)('d', 0.03560371517027864) -&gt; ('d', 0.0425)('h', 0.03560371517027864) -&gt; ('l', 0.0403)('v', 0.034055727554179564) -&gt; ('c', 0.0278)('x', 0.030959752321981424) -&gt; ('u', 0.0276)('y', 0.029411764705882353) -&gt; ('m', 0.02414)('n', 0.02631578947368421) -&gt; ('w', 0.0236)('s', 0.02631578947368421) -&gt; ('f', 0.0223)('t', 0.020123839009287926) -&gt; ('g', 0.0202)('l', 0.01238390092879257) -&gt; ('y', 0.0197)('q', 0.010835913312693499) -&gt; ('p', 0.0193)('o', 0.010835913312693499) -&gt; ('b', 0.015)('e', 0.007739938080495356) -&gt; ('v', 0.0098)('a', 0.007739938080495356) -&gt; ('k', 0.0077)('c', 0.007739938080495356) -&gt; ('j', 0.0015)('f', 0.0015479876160990713) -&gt; ('x', 0.0015)('g', 0.0015479876160990713) -&gt; ('q', 0.001)Trying to decipher:yecawse the fractnce iu the yasnc mivemeots iu pata nsthe uicws aod masterg iu selu ns the esseoce iumatswyagashn rgw parate di n shall trg ti elwcndate themivemeots iu the pata accirdnob ti mg noterfretatnioyased io uirtg gears iu stwdgnt ns oit ao easg tasp ti ekflano each mivemeot aod ntssnbonuncaoce aod sime mwst remano woekflanoed ti bnve acimflete ekflaoatnio ioe jiwld have ti ye xwalnuned aodnosfnred ti swch ao ekteot that he ciwld reach the stateiu eolnbhteoed mnod cafayle iu recibonqnob siwodlesssiwod aod shafeless shafe n di oit deem mgselu the unoalawthirntg ywt mg ekferneoce jnth pata has leut oi diwytthat the uillijnob ns the frifer afflncatnio aodnoterfretatnio n iuuer mg theirnes no the hife that theesseoce iu ipnoajao parate jnll remano notactDoing corrections manually:l -&gt; y ==&gt; l -&gt; b        Conflit: l -&gt; b        Conflit: o -&gt; bq -&gt; p ==&gt; q -&gt; k        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kt -&gt; g ==&gt; t -&gt; y        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kn -&gt; w ==&gt; n -&gt; u        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kw -&gt; n ==&gt; w -&gt; i        Conflit: j -&gt; i        Conflit: w -&gt; i        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kj -&gt; i ==&gt; j -&gt; o        Conflit: k -&gt; o        Conflit: j -&gt; o        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kk -&gt; o ==&gt; k -&gt; n        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; ks -&gt; f ==&gt; s -&gt; p        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kc -&gt; j ==&gt; c -&gt; w        Conflit: x -&gt; u        Conflit: n -&gt; u        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; kx -&gt; u ==&gt; x -&gt; f        Conflit: l -&gt; b        Conflit: q -&gt; k        Conflit: o -&gt; b        Conflit: a -&gt; ka -&gt; k ==&gt; a -&gt; x        Conflit: l -&gt; b        Conflit: o -&gt; b        Conflit: a -&gt; x        Conflit: f -&gt; xo -&gt; b ==&gt; o -&gt; g        Conflit: a -&gt; x        Conflit: f -&gt; xg -&gt; q ==&gt; g -&gt; z        Conflit: a -&gt; x        Conflit: f -&gt; xf -&gt; x ==&gt; f -&gt; q        Check okCorresponding words:[('lrvmnir', 'because'), ('bpr', 'the'), ('sumvbwvr', 'practice'), ('jx', 'of'), ('bpr', 'the'), ('lmiwv', 'basic'), ('yjeryrkbi', 'movements'), ('jx', 'of'), ('qmbm', 'kata'), ('wi', 'is'), ('bpr', 'the'), ('xjvni', 'focus'), ('mkd', 'and'), ('ymibrut', 'mastery'), ('jx', 'of'), ('irhx', 'self'), ('wi', 'is'), ('bpr', 'the'), ('riirkvr', 'essence'), ('jx', 'of'), ('ymbinlmtmipw', 'matsubayashi'), ('utn', 'ryu'), ('qmumbr', 'karate'), ('dj', 'do'), ('w', 'i'), ('ipmhh', 'shall'), ('but', 'try'), ('bj', 'to'), ('rhnvwdmbr', 'elucidate'), ('bpr', 'the'), ('yjeryrkbi', 'movements'), ('jx', 'of'), ('bpr', 'the'), ('qmbm', 'kata'), ('mvvjudwko', 'according'), ('bj', 'to'), ('yt', 'my'), ('wkbrusurbmbwjk', 'interpretation'), ('lmird', 'based'), ('jk', 'on'), ('xjubt', 'forty'), ('trmui', 'years'), ('jx', 'of'), ('ibndt', 'study'), ('wb', 'it'), ('wi', 'is'), ('kjb', 'not'), ('mk', 'an'), ('rmit', 'easy'), ('bmiq', 'task'), ('bj', 'to'), ('rashmwk', 'explain'), ('rmvp', 'each'), ('yjeryrkb', 'movement'), ('mkd', 'and'), ('wbi', 'its'), ('iwokwxwvmkvr', 'significance'), ('mkd', 'and'), ('ijyr', 'some'), ('ynib', 'must'), ('urymwk', 'remain'), ('nkrashmwkrd', 'unexplained'), ('bj', 'to'), ('ower', 'give'), ('m', 'a'), ('vjyshrbr', 'complete'), ('rashmkmbwjk', 'explanation'), ('jkr', 'one'), ('cjnhd', 'would'), ('pmer', 'have'), ('bj', 'to'), ('lr', 'be'), ('fnmhwxwrd', 'qualified'), ('mkd', 'and'), ('wkiswurd', 'inspired'), ('bj', 'to'), ('invp', 'such'), ('mk', 'an'), ('rabrkb', 'extent'), ('bpmb', 'that'), ('pr', 'he'), ('vjnhd', 'could'), ('urmvp', 'reach'), ('bpr', 'the'), ('ibmbr', 'state'), ('jx', 'of'), ('rkhwopbrkrd', 'enlightened'), ('ywkd', 'mind'), ('vmsmlhr', 'capable'), ('jx', 'of'), ('urvjokwgwko', 'recognizing'), ('ijnkdhrii', 'soundless'), ('ijnkd', 'sound'), ('mkd', 'and'), ('ipmsrhrii', 'shapeless'), ('ipmsr', 'shape'), ('w', 'i'), ('dj', 'do'), ('kjb', 'not'), ('drry', 'deem'), ('ytirhx', 'myself'), ('bpr', 'the'), ('xwkmh', 'final'), ('mnbpjuwbt', 'authority'), ('lnb', 'but'), ('yt', 'my'), ('rasruwrkvr', 'experience'), ('cwbp', 'with'), ('qmbm', 'kata'), ('pmi', 'has'), ('hrxb', 'left'), ('kj', 'no'), ('djnlb', 'doubt'), ('bpmb', 'that'), ('bpr', 'the'), ('xjhhjcwko', 'following'), ('wi', 'is'), ('bpr', 'the'), ('sujsru', 'proper'), ('msshwvmbwjk', 'application'), ('mkd', 'and'), ('wkbrusurbmbwjk', 'interpretation'), ('w', 'i'), ('jxxru', 'offer'), ('yt', 'my'), ('bprjuwri', 'theories'), ('wk', 'in'), ('bpr', 'the'), ('pjsr', 'hope'), ('bpmb', 'that'), ('bpr', 'the'), ('riirkvr', 'essence'), ('jx', 'of'), ('jqwkmcmk', 'okinawan'), ('qmumbr', 'karate'), ('cwhh', 'will'), ('urymwk', 'remain'), ('wkbmvb', 'intact')]Deciphered text:because the practice of the basic movements of kata isthe focus and mastery of self is the essence ofmatsubayashi ryu karate do i shall try to elucidate themovements of the kata according to my interpretationbased on forty years of studyit is not an easy task to explain each movement and itssignificance and some must remain unexplained to give acomplete explanation one would have to be qualified andinspired to such an extent that he could reach the stateof enlightened mind capable of recognizing soundlesssound and shapeless shape i do not deem myself the finalauthority but my experience with kata has left no doubtthat the following is the proper application andinterpretation i offer my theories in the hope that theessence of okinawan karate will remain intactKey maps:rbmkjwipudhvxynstlqoeacfgetanoishrdlcfmupybkgvxwqzr 0.13003095975232198 -&gt; e 0.127b 0.10526315789473684 -&gt; t 0.0906m 0.09597523219814241 -&gt; a 0.0817k 0.07585139318885449 -&gt; n 0.0675j 0.07430340557275542 -&gt; o 0.0751w 0.07275541795665634 -&gt; i 0.0697i 0.06346749226006192 -&gt; s 0.0633p 0.04643962848297214 -&gt; h 0.0609u 0.03715170278637771 -&gt; r 0.0599d 0.03560371517027864 -&gt; d 0.0425h 0.03560371517027864 -&gt; l 0.0403v 0.034055727554179564 -&gt; c 0.0278x 0.030959752321981424 -&gt; f 0.0223y 0.029411764705882353 -&gt; m 0.02414n 0.02631578947368421 -&gt; u 0.0276s 0.02631578947368421 -&gt; p 0.0193t 0.020123839009287926 -&gt; y 0.0197l 0.01238390092879257 -&gt; b 0.015q 0.010835913312693499 -&gt; k 0.0077o 0.010835913312693499 -&gt; g 0.0202e 0.007739938080495356 -&gt; v 0.0098a 0.007739938080495356 -&gt; x 0.0015c 0.007739938080495356 -&gt; w 0.0236f 0.0015479876160990713 -&gt; q 0.001g 0.0015479876160990713 -&gt; z 0.0007</code></pre></div></div><p>(3) It’s from “Essence of Okinawan Karate-Do” by Shoshin Nagamine.</p><h3 id=\"12\">1.2</h3><p>Decipher the following ciphertext encoded with a shift cipher:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>xultpaajcxitltlxaarpjhtiwtgxktghidhipxciwtvgtpilpitghlxiwiwtxgqadds.</code></pre></div></div><p>(1) First we calculate the frequency of each letter in the ciphertext:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[('t', 10), ('i', 9), ('x', 7), ('l', 5), ('p', 5), ('a', 5), ('g', 5), ('h', 4), ('w', 4), ('d', 3), ('j', 2), ('c', 2), ('u', 1), ('r', 1), ('k', 1), ('v', 1), ('q', 1), ('s', 1)]</code></pre></div></div><p>As can be seen, letter <code class=\"highlighter-rouge\">t</code> appears mostly in the ciphertext, which corresponds to the mostly appearing letter <code class=\"highlighter-rouge\">e</code> in the alphabet. So now we know <code class=\"highlighter-rouge\">e</code> has probably been transformed to <code class=\"highlighter-rouge\">t</code>, and the shift number is <code class=\"highlighter-rouge\">ord('t') - ord('e')</code> which is 15. After trying 15 as the shift number, I successfully deciphered the ciphertext, so I identified only one letter.</p><p>(2) Using 15 as the shift number:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ifweallunitewewillcausetheriverstostainthegreatwaterswiththeirblood.</code></pre></div></div><p>After manually inserting some spaces between words:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if we all unite we will cause the rivers to stain the great waters with their blood.</code></pre></div></div><p>(3) It’s from Tecumseh’s speech to the Osages.</p><h3 id=\"13\">1.3</h3><p>(1) ASICs that can run in parallel:</p>\\[\\frac{1000000}{(50\\times2)}=10000\\]<p>Seconds it takes to do an average key search:</p>\\[\\frac{2^{128-1}}{(10000\\times5\\times10^8)}=3.40282\\times 10^{25} \\\\3.40282\\times 10^{25} secs \\approx 1.07903\\times 10^{18} years\\]<p>This is much longer than the age of the universe ($\\approx10^8$ times).</p><p>(2) Represent the number of Moore’s Law iterations as $x$, we can get the following equation:</p>\\[\\frac{2^{128-1}}{\\frac{1000000}{(50\\times2)}\\times(5\\times10^8)\\times2^x}=24\\times60\\times60\\\\x=68.4162\\\\\\frac{18}{12}\\times68.4162\\approx102.624\\ (years)\\]<p>So it’ll take approximately 103 years.</p><h3 id=\"14\">1.4</h3><p>(1) Size of the key space that can be constructed be the specified passwords:</p>\\[128^8=2^{56}\\]<p>(2) The corresponding key length in bits: $\\log_2{2^{56}}=56$.</p><p>(3) The corresponding key length in bits when users use only the 26 lowercase letters from the alphabet:</p>\\[\\log_2{26^8}\\approx37.6035\\approx38\\]<p>(4) a. 7-bit characters:</p>\\[128^x=2^{128}\\\\(2^7)^x=2^{7x}=2^{128}\\\\x\\approx18.3\\]<p>So it at least requires 19 characters.</p><p>(4) b. 26 lowercase letters from the alphabet:</p>\\[26^x=2^{128}\\\\x=\\log_{26}{2^{128}}\\\\x\\approx27.2\\]<p>So at least 28 characters are required.</p><h3 id=\"15\">1.5</h3><p>(1) $15 \\cdot 29 \\equiv 2\\cdot3 \\equiv 6 \\bmod 13$</p><p>(2) $2 \\cdot 29 \\equiv 2 \\cdot 3 \\equiv 6 \\bmod 13$</p><p>(3) $2 \\cdot 3 \\equiv 6 \\bmod 13$</p><p>(4) $-11 \\cdot 3 \\equiv 2 \\cdot 3 \\equiv 6 \\bmod 13$</p><p>All members in the same equivalence class behave the same.</p><h3 id=\"16\">1.6</h3><p>(1) $1/5\\bmod13=8$</p><p>(2) $1/5\\bmod7=3$</p><p>(3) $3\\cdot2/5\\bmod7=4$</p><h3 id=\"17\">1.7</h3><p>(1) $\\mathbb{Z}_4$, multiplication table:</p>\\[\\begin{array}{c|c c c c} \\times  &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 0 &amp; 2 &amp; 0 &amp; 2 \\\\ 3 &amp; 0 &amp; 3 &amp; 2 &amp; 1 \\\\ \\end{array}\\]<p>(2) $\\mathbb{Z}_5$, addition and multiplication table:</p>\\[\\begin{array}{c|c c c c c} + &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 0 \\\\ 2 &amp; 2 &amp; 3 &amp; 4 &amp; 0 &amp; 1 \\\\ 3 &amp; 3 &amp; 4 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 4 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\\\ \\end{array}\\ \\ \\begin{array}{c|c c c c c} \\times  &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 2 &amp; 0 &amp; 2 &amp; 4 &amp; 1 &amp; 3 \\\\ 3 &amp; 0 &amp; 3 &amp; 1 &amp; 4 &amp; 2 \\\\ 4 &amp; 0 &amp; 4 &amp; 3 &amp; 2 &amp; 1 \\\\ \\end{array}\\]<p>(3) $\\mathbb{Z}_6$, addition and multiplication table:</p>\\[\\begin{array}{c|c c c c c c} + &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 0 \\\\ 2 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 1 \\\\ 3 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 2 &amp; 3 \\\\ 5 &amp; 3 &amp; 4 &amp; 5 &amp; 0 &amp; 3 &amp; 4 \\\\ \\end{array}\\ \\ \\begin{array}{c|c c c c c c} \\times  &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\\\ 2 &amp; 0 &amp; 2 &amp; 4 &amp; 0 &amp; 2 &amp; 4 \\\\ 3 &amp; 0 &amp; 3 &amp; 0 &amp; 3 &amp; 0 &amp; 3 \\\\ 4 &amp; 0 &amp; 4 &amp; 2 &amp; 0 &amp; 4 &amp; 2 \\\\ 5 &amp; 0 &amp; 5 &amp; 4 &amp; 3 &amp; 2 &amp; 1 \\\\ \\end{array}\\]<p>(4) a. In $\\mathbb{Z}_4$, 0 and 2 do not have a multiplicative inverse. In $\\mathbb{Z}_6$, 0, 2, 3 and 4 do not have a multiplicative inverse.</p><p>(4) b. 5 is a prime number. All non-zero numbers smaller than 5 are coprime to 5.</p><h3 id=\"18\">1.8</h3>\\[5\\times9\\equiv1\\bmod11\\to5^{-1}\\equiv9\\bmod11\\\\5\\times5\\equiv1\\bmod12\\to5^{-1}\\equiv5\\bmod12\\\\5\\times8\\equiv1\\bmod13\\to5^{-1}\\equiv8\\bmod13\\\\\\]<h3 id=\"19\">1.9</h3><p>(1) $x=3^2\\bmod13\\equiv9\\bmod13$</p><p>(2) $x=7^2 \\bmod 13 \\equiv 10 \\bmod 13$</p><p>(3)</p>\\[\\begin{aligned}x&amp;=3^{10}\\bmod 13\\\\&amp;=3^9\\times3\\bmod13\\\\&amp;=27^3\\times3\\bmod13\\\\&amp; =(13\\times2+1)^3\\times3\\bmod13\\\\&amp;\\equiv1^3\\times3\\bmod13\\\\&amp;\\equiv 3 \\bmod 13\\end{aligned}\\]<p>(4)</p>\\[\\begin{aligned}x&amp;=7^{100}\\bmod13\\\\&amp;=(7^2)^{50}\\bmod13\\\\&amp;=(13\\times3+10)^{50}\\bmod13\\\\&amp;\\equiv10^{50}\\bmod13\\\\&amp;=100^{25}\\bmod13\\\\&amp;=(13\\times7+9)^{25}\\bmod 13\\\\&amp;\\equiv9^{25}\\bmod13\\\\&amp;=81^{12}\\times9\\bmod13\\\\&amp;=(13\\times6+3)^{12}\\times9\\bmod13\\\\&amp;\\equiv3^{14}\\bmod13\\\\&amp;=(3^4)^3\\times3^2\\bmod13\\\\&amp;\\equiv3^3\\times3^2\\bmod13\\\\&amp;\\equiv3\\times3\\bmod13\\\\&amp;=9\\bmod13\\end{aligned}\\]<p>(5) Through trial &amp; error:</p>\\[7^x=11\\bmod13\\\\x=5\\]<h3 id=\"110\">1.10</h3>\\[\\phi(4)=2,\\phi(5)=4,\\phi(9)=6,\\phi(26)=12\\]<h3 id=\"111\">1.11</h3><p>(1) See the solution script:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># enc: f = 7*x+22 mod 26# dec: x = (f-22)*inv(7,26) mod 26#        = (f-22)*15 mod 26</span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"s\">'falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj'</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"s\">''</span><span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"n\">e</span><span class=\"p\">:</span>    <span class=\"n\">each</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">each</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span>    <span class=\"n\">each</span> <span class=\"o\">-=</span> <span class=\"mi\">22</span>    <span class=\"n\">each</span> <span class=\"o\">*=</span> <span class=\"mi\">15</span>    <span class=\"n\">each</span> <span class=\"o\">%=</span> <span class=\"mi\">26</span>    <span class=\"n\">each</span> <span class=\"o\">=</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">each</span><span class=\"p\">)</span>    <span class=\"n\">m</span> <span class=\"o\">+=</span> <span class=\"n\">each</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"c1\"># first the sentence and then the evidence said the queen</span></code></pre></div></div><p>(2) Lewis Carroll wrote it in one of his poems.</p><h3 id=\"112\">1.12</h3><p>(1)</p>\\[e_k(x)=y=a\\cdot x+b\\bmod30\\\\d_k(y)=x=a^{-1}\\cdot(y-b)\\bmod 30\\\\\\text{Key and Requirements:} \\\\(k=(a,b)\\ \\&amp;\\ gcd(a,30)=1)\\]<p>(2)</p>\\[\\phi(30)\\times30=8\\times30=240\\]<p>(3) Transform the ciphertext into bias-in-the-alphabet form: <code class=\"highlighter-rouge\">(26,20,29,22,29)</code></p>\\[17^{-1}\\equiv23\\bmod30\\to d(y)=(y-1)\\times23\\bmod30\\\\d(26,20,29,22,29)=(5,17,14,3,14)\\]<p>Transform it back, we get the plaintext: <code class=\"highlighter-rouge\">FRODO</code>.</p><p>(4) <a href=\"https://en.wikipedia.org/wiki/Frodo_Baggins\" target=\"_blank\">Frodo</a> comes from The Shire (Lord Of The Rings character).</p><h3 id=\"113\">1.13</h3>\\[\\begin{cases}y_1=ax_1+b\\\\y_2=ax_2+b\\end{cases}\\Rightarrow \\begin{cases}b=y_1-ax_1\\\\a=(y_2-y_1)(x_2-x_1)^{-1}\\end{cases}\\pmod N\\\\\\text{(N is the size of the alphabet being encrypted)}\\\\\\text{}\\\\\\text{We should make sure that: }gcd(x_2-x_1,N)=1\\\\\\text{so that }(x_2-x_1)^{-1}\\bmod{N} \\text{ exists}.\\]<h3 id=\"114\">1.14</h3><p>(1)</p>\\[e_{k2}(e_{k1}(x))=a_2(a_1x+b_1)+b_2=a_1a_2x+a_2b_1+b_2\\pmod{26}\\\\\\text{let }k_3\\equiv(a_1a_2,a_2b_1+b_2)\\pmod{26}\\\\\\text{then }e_{k3}=e_{k2}(e_{k1}(x))\\]<p>(2)</p>\\[a_3=a_1a_2\\bmod26=33\\bmod26\\equiv7\\bmod26\\\\b_3=a_2b_1+b_2\\bmod26=11\\times5+7\\bmod26\\equiv10\\bmod26\\\\\\Rightarrow(a_3,b_3)\\equiv(7,10)\\bmod26\\]<p>(3) See the solution script:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">enc_k1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span><span class=\"k\">def</span> <span class=\"nf\">enc_k2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span><span class=\"k\">def</span> <span class=\"nf\">enc_k3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span><span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">enc_k2</span><span class=\"p\">(</span><span class=\"n\">enc_k1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"o\">!=</span> <span class=\"n\">enc_k3</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Error!'</span><span class=\"p\">)</span>        <span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Verified'</span><span class=\"p\">)</span></code></pre></div></div><p>Output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Verified</code></pre></div></div><p>(4) Searching all $(k_1\\in K,k_2\\in K)$ is equivalent to just searching all $k_3\\in K$. The keyspace does not increase at all by the specified double encryption.</p>",
            "url": "http://localhost:4000/2021/01/25/answers-to-understanding-cryptography-problems-chapter1",
            
            
            
            "tags": ["Crypto","Understanding Cryptography"],
            
            "date_published": "2021-01-25T00:00:00+08:00",
            "date_modified": "2021-01-25T00:00:00+08:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/10/23/n1vault",
            "title": "N1CTF2020 n1vault, Thoughts & Solutions",
            "summary": null,
            "content_text": "IntroI designed the RE challenge n1vault in the recent CTF N1CTF2020, in this post I will talk about details about this chal and offer some possible solutions.The core part of this challenge is to craft a file’s CRC to an arbitrary value(zero) by modifying some specified bytes of the same bit size as the CRC value.As for the binary n1vault, it uses SHA256 to digest all the bytes inside the file(credencial.png) except for the even bytes in the last 25 bytes(some twists were added to the sha256_update function, paving the way for the backdoor), once the file’s CRC has been faked to 0, a secret logic(backdoor) will be triggered by an exception FPE_INTDIV, since the verification inside function main has an unnecessary comparison 4764888639493207598 / (crc32_result | crc64_result) == 1, which will trigger an FPE_INTDIV when both crc32_result and crc64_result are zero, and will be evaluated to true when given the original file credential.png. Players’ job is to to craft an input to trigger the backdoor, send the crafted bytes to the judging bot and receive the flag.SolutionThe reverse engineering part of the binary program is quite easy, some junks with fixed patterns are inserted into the main logic, which can be bypassed by simple searching &amp; replacing. After that the program logic is really straightforward, we only have to solve the math problem left.CRC has a property that the final result can be viewed as the linear combination of the influence of each bit in the message and an initial bias, based on $GF(2)$, which can be described as:\\(f(x)=f(0) + \\sum_{i=0}^{CRC\\_SIZE-1} x_i \\cdot \\mbox{influence}(i),\\)where $f(0)$ is the initial bias, specifically for this challenge, is the CRC of the credential with all the even bytes in the last 25 bytes set to zero. Given this property, if we have enough $x_i$ to control, we can easily construct a matrix and solve each $x_i$ using gauss elimination. The twist here is that we have to ensure both $f(x)=CRC32(credential)$ and $g(x)=CRC64(credential)$ are equal to zero. Actually if we let $h(x)=(f(x) &lt; &lt; 64)+g(x)$ and focus our attention on making $h(x)=0$, it has the same effect as making both $f(x)$ and $g(x)$ zero.I write a tool based on this interesting property of CRC, allowing us to arbitrarily craft a file’s CRC by specifying certain bits available for modification. It can output all the available solutions and allows for fewer available bits than the bit size of the CRC result. You can check the tool here:  https://github.com/yype/crcolliderUsing this tool we can easily solve the problem using the following Python code:from crcollider import collcrcfrom crc_funcs import crc64, crc32def crc96(m):    return (crc32(m) &lt;&lt; 64) + crc64(m)def solve_chal():    with open('credential.png', 'rb') as f:        org_img = f.read()    rg = list(range(len(org_img)*8))    available_bits = []    for i in range(12):        # even bytes in the last 25 bytes        available_bits += rg[len(rg)-16*i-16:len(rg)-16*i-8]    sol_num, sols = collcrc(crc96, 96, org_img, available_bits, 0x0)        print(f'{sol_num} solution(s) found')    for i, each in enumerate(sols):        file_out = f'credential_sol{i}.png'        print(f'Outputting sol{i} to {file_out}...')        with open(file_out, 'wb') as f:            f.write(each)if __name__ == '__main__':    solve_chal()There are totally 4 solutions available for this challenge. One of them contains only visible characters, which is n1vaultadmin(intentionally crafted), while others are not. It might be better if I put some constraints to ensure that only one solution is available though.solution&gt; python3 .\\main.py4 solution(s) foundOutputting sol0 to credential_sol0.png...Outputting sol1 to credential_sol1.png...Outputting sol2 to credential_sol2.png...Outputting sol3 to credential_sol3.png...You can also check the awesome write-up from team Super Guesser who got the first blood of this challenge here: https://gist.github.com/jhs7jhs/cb5fedc1ffb6138b73420cb8567357bb#n1vault.The source code of this challenge and a duplicate of this post are uploaded to GitHub, check them out at: https://github.com/Nu1LCTF/n1ctf-2020/tree/main/RE/n1vault.",
            "content_html": "<h2 id=\"intro\">Intro</h2><p>I designed the RE challenge <em>n1vault</em> in the recent CTF <a href=\"https://ctftime.org/event/1099\" target=\"_blank\">N1CTF2020</a>, in this post I will talk about details about this chal and offer some possible solutions.</p><p>The core part of this challenge is to craft a file’s CRC to an arbitrary value(zero) by modifying some specified bytes of the same bit size as the CRC value.</p><p>As for the binary <code class=\"highlighter-rouge\">n1vault</code>, it uses SHA256 to digest all the bytes inside the file(<code class=\"highlighter-rouge\">credencial.png</code>) except for the even bytes in the last 25 bytes(some twists were added to the <em>sha256_update</em> function, paving the way for the backdoor), once the file’s CRC has been faked to 0, a secret logic(backdoor) will be triggered by an exception <em>FPE_INTDIV</em>, since the verification inside function <code class=\"highlighter-rouge\">main</code> has an unnecessary comparison <code class=\"highlighter-rouge\">4764888639493207598 / (crc32_result | crc64_result) == 1</code>, which will trigger an <em>FPE_INTDIV</em> when both crc32_result and crc64_result are zero, and will be evaluated to <em>true</em> when given the original file <code class=\"highlighter-rouge\">credential.png</code>. Players’ job is to to craft an input to trigger the backdoor, send the crafted bytes to the judging bot and receive the flag.</p><h2 id=\"solution\">Solution</h2><p>The reverse engineering part of the binary program is quite easy, some junks with fixed patterns are inserted into the main logic, which can be bypassed by simple searching &amp; replacing. After that the program logic is really straightforward, we only have to solve the math problem left.</p><p>CRC has a property that the final result can be viewed as the linear combination of the influence of each bit in the message and an initial bias, based on $GF(2)$, which can be described as:\\(f(x)=f(0) + \\sum_{i=0}^{CRC\\_SIZE-1} x_i \\cdot \\mbox{influence}(i),\\)where $f(0)$ is the initial bias, specifically for this challenge, is the CRC of the credential with all the even bytes in the last 25 bytes set to zero. Given this property, if we have enough $x_i$ to control, we can easily construct a matrix and solve each $x_i$ using gauss elimination. The twist here is that we have to ensure both $f(x)=CRC32(credential)$ and $g(x)=CRC64(credential)$ are equal to zero. Actually if we let $h(x)=(f(x) &lt; &lt; 64)+g(x)$ and focus our attention on making $h(x)=0$, it has the same effect as making both $f(x)$ and $g(x)$ zero.</p><p>I write a tool based on this interesting property of CRC, allowing us to arbitrarily craft a file’s CRC by specifying certain bits available for modification. It can output all the available solutions and allows for fewer available bits than the bit size of the CRC result. You can check the tool here:</p><blockquote>  <p><a href=\"https://github.com/yype/crcollider\" target=\"_blank\">https://github.com/yype/crcollider</a></p></blockquote><p>Using this tool we can easily solve the problem using the following Python code:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">crcollider</span> <span class=\"kn\">import</span> <span class=\"n\">collcrc</span><span class=\"kn\">from</span> <span class=\"nn\">crc_funcs</span> <span class=\"kn\">import</span> <span class=\"n\">crc64</span><span class=\"p\">,</span> <span class=\"n\">crc32</span><span class=\"k\">def</span> <span class=\"nf\">crc96</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">crc32</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">64</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">crc64</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">solve_chal</span><span class=\"p\">():</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'credential.png'</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>        <span class=\"n\">org_img</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>    <span class=\"n\">rg</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">org_img</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"p\">))</span>    <span class=\"n\">available_bits</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">):</span>        <span class=\"c1\"># even bytes in the last 25 bytes</span>        <span class=\"n\">available_bits</span> <span class=\"o\">+=</span> <span class=\"n\">rg</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rg</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rg</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">]</span>    <span class=\"n\">sol_num</span><span class=\"p\">,</span> <span class=\"n\">sols</span> <span class=\"o\">=</span> <span class=\"n\">collcrc</span><span class=\"p\">(</span><span class=\"n\">crc96</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"n\">org_img</span><span class=\"p\">,</span> <span class=\"n\">available_bits</span><span class=\"p\">,</span> <span class=\"mh\">0x0</span><span class=\"p\">)</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'{sol_num} solution(s) found'</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sols</span><span class=\"p\">):</span>        <span class=\"n\">file_out</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"s\">'credential_sol{i}.png'</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'Outputting sol{i} to {file_out}...'</span><span class=\"p\">)</span>        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_out</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">each</span><span class=\"p\">)</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>    <span class=\"n\">solve_chal</span><span class=\"p\">()</span></code></pre></div></div><p>There are totally 4 solutions available for this challenge. One of them contains only visible characters, which is <code class=\"highlighter-rouge\">n1vaultadmin</code>(intentionally crafted), while others are not. It might be better if I put some constraints to ensure that only one solution is available though.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>solution&gt; python3 .\\main.py4 solution(s) foundOutputting sol0 to credential_sol0.png...Outputting sol1 to credential_sol1.png...Outputting sol2 to credential_sol2.png...Outputting sol3 to credential_sol3.png...</code></pre></div></div><p>You can also check the awesome write-up from team <em>Super Guesser</em> who got the first blood of this challenge here: <a href=\"https://gist.github.com/jhs7jhs/cb5fedc1ffb6138b73420cb8567357bb#n1vault\" target=\"_blank\">https://gist.github.com/jhs7jhs/cb5fedc1ffb6138b73420cb8567357bb#n1vault</a>.</p><p>The source code of this challenge and a duplicate of this post are uploaded to GitHub, check them out at: <a href=\"https://github.com/Nu1LCTF/n1ctf-2020/tree/main/RE/n1vault\" target=\"_blank\">https://github.com/Nu1LCTF/n1ctf-2020/tree/main/RE/n1vault</a>.</p>",
            "url": "http://localhost:4000/2020/10/23/n1vault",
            
            
            
            "tags": ["CTF","Reverse Engineering","N1CTF2020"],
            
            "date_published": "2020-10-23T00:00:00+08:00",
            "date_modified": "2020-10-23T00:00:00+08:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/04/20/hypercard-over-windows",
            "title": "PlaidCTF2020 The Watness 2 Write-up",
            "summary": null,
            "content_text": "IntroRecently in PlaidCTF2020 there was a RE challenge called The Watness 2, which is a game that requires the application HyperCard to run. Since I did not have a Macbook computer, I’d been struggling figuring out ways to run this game over my Windows 10 laptop. Here is how I finally managed to do that.Steps  Follow this great video tutorial  Download StuffitExpander, add it to the volumes’ list, install it inside the VM:  Download HyperCard 2.4, install it inside the VM as described above  Extract the .rc1 file from the .sit file and open it with a simple double-click:Challenge SolutionExtract the stack’s script code:on openCard  Send colorMe to this card  pass openCardend openCardon closeCard  global prev_card  get the id of this cd  put it into prev_card  lock screen  pass closeCardend closeCardon colorMe  AddColor colorCard,stamp,0end colorMeon openStack  AddColor install  setupMenu  go to card \"tun-1-n\"  pass openStackend openStackon closeStack  AddColor remove  pass closeStackend closeStackon genPuzzle  send \"doMenu New Button\" to Hypercardend genPuzzleon initCard  answer prev_cardend initCardon menuReset  setupMenu  pass menuResetend menuReseton setupMenu  if there is not a menu \"Watness\" then    create menu \"Watness\"    put \"Generate Puzzle\"&amp;return&amp;\"Init Card\"&amp;return&amp;\"Set up Nav\"&amp;return&amp;\"Create Puzzle\" into menu \"Watness\" with menuMsg genPuzzle,initCard,setupNav,constructPuzzle  end ifend setupMenuon setupNav  ask \"What is the name of this card\"  set name of this cd to it    ask \"Where should the left go?\"  put it into left_loc  send \"doMenu New Button\" to Hypercard  set height of the last button to 342  set width of the last button to 100  set topleft of the last button to \"0,0\"  set style of the last button to \"transparent\"  set name of the last button to \"\"  put \"on mouseUp\"&amp;return&amp;\"go to card \"&amp;quote&amp;\"\"&amp;left_loc&amp;quote&amp;return&amp;\"end mouseUp\" into left_script  set script of last button to left_script    ask \"Where should the right go?\"  put it into right_loc  send \"doMenu New Button\" to Hypercard  set height of the last button to 342  set width of the last button to 100  set topleft of the last button to \"412,0\"  set style of the last button to \"transparent\"  set name of the last button to \"\"  put \"on mouseUp\"&amp;return&amp;\"go to card \"&amp;quote&amp;\"\"&amp;right_loc&amp;quote&amp;return&amp;\"end mouseUp\" into right_script  set script of last button to right_script    ask \"Where should fwd go?\"  put it into fwd_loc  send \"doMenu New Button\" to Hypercard  set height of the last button to 342  set width of the last button to 311  set the top of the last button to 0  set the left of the last button to 100  set style of the last button to \"transparent\"  set name of the last button to \"\"  put \"on mouseUp\"&amp;return&amp;\"go to card \"&amp;quote&amp;\"\"&amp;fwd_loc&amp;quote&amp;return&amp;\"end mouseUp\" into fwd_script  set script of last button to fwd_script    get the script of this card  put it into cd_script  put cd_script&amp;return into cd_script  put cd_script&amp;\"on arrowKey key\"&amp;return into cd_script  put cd_script&amp;\" if key = \"&amp;quote&amp;\"left\"&amp;quote&amp;\"then\"&amp;return into cd_script  put cd_script&amp;\"  go to cd \"&amp;quote&amp;left_loc&amp;quote&amp;return into cd_script  put cd_script&amp;\" end if\"&amp;return into cd_script  put cd_script&amp;\" if key = \"&amp;quote&amp;\"right\"&amp;quote&amp;\"then\"&amp;return into cd_script  put cd_script&amp;\"  go to cd \"&amp;quote&amp;right_loc&amp;quote&amp;return into cd_script  put cd_script&amp;\" end if\"&amp;return into cd_script  put cd_script&amp;\" if key = \"&amp;quote&amp;\"up\"&amp;quote&amp;\"then\"&amp;return into cd_script  put cd_script&amp;\"  go to cd \"&amp;quote&amp;fwd_loc&amp;quote&amp;return into cd_script  put cd_script&amp;\" end if\"&amp;return into cd_script  put cd_script&amp;\"end arrowKey\"&amp;return into cd_script      set the script of this cd to cd_scriptend setupNavon makeNode  global node  send \"doMenu New Button\" to Hypercard  put the id of the last button into nodeend makeNodeon constructPuzzle  global node,constraints    ask \"What are the constraints\"  put it into constraints    get the script of this cd  put it into cd_script  put cd_script&amp;return into cd_script  put cd_script&amp;\"on openCard\"&amp;return into cd_script  put cd_script&amp;\"  global constraints,path,cursor_x,cursor_y,\" into cd_script    put 0 into i  repeat for 8        put 0 into j    repeat for 8      put cd_script&amp;\"active_\"&amp;i&amp;\"_\"&amp;j&amp;\",\" into cd_script            put j+1 into j    end repeat        put i+1 into i  end repeat    put cd_script&amp;\"dummy\"&amp;return into cd_script  put cd_script&amp;\"  colorme\"&amp;return into cd_script  put cd_script&amp;\"  put -1 into cursor_x\"&amp;return into cd_script  put cd_script&amp;\"  put 0 into cursor_y\"&amp;return into cd_script  put cd_script&amp;\"  put \"&amp;quote&amp;quote&amp;\" into path\"&amp;return into cd_script  put cd_script&amp;\"  put \"&amp;quote&amp;constraints&amp;quote&amp;\" into constraints\"&amp;return into cd_script    put 1 into c_i  put 0 into i  repeat for 7        put 0 into j    repeat for 7      get char (j*7+i+1) of constraints      put it into letter            if letter &lt;&gt; \" \" then        makeNode                set the width of button id node to 10        set the height of button id node to 10                set the top of button id node to (76 + j * 30)        set the left of button id node to (161 + i * 30)                set the style of button id node to \"opaque\"        set showName of button id node to false                if letter = \"r\" then          put \"65535,0,0\" into node_color        end if        if letter = \"g\" then          put \"0,65535,0\" into node_color        end if        if letter = \"b\" then          put \"0,0,65535\" into node_color        end if                if letter &lt;&gt; \" \" then          addColor colorButton, cd, node, node_color                    put cd_script&amp;\"  addColor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;node_color&amp;quote&amp;return into cd_script        end if      end if                        put j+1 into j    end repeat        put i+1 into i  end repeat        put 0 into i  repeat for 8        put 0 into j    repeat for 8      put cd_script&amp;\"  put \"&amp;quote&amp;quote&amp;\" into active_\"&amp;i&amp;\"_\"&amp;j&amp;return into cd_script            put j+1 into j    end repeat        put i+1 into i  end repeat    makeNode    set the width of button id node to 10  set the height of button id node to 15  set the left of button id node to 356  set the top of button id node to 276  set the name of button id node to \"path_extension\"  set showName of button id node to false  set the style of button id node to opaque  addcolor colorButton, cd, node, \"37632,30208,12288\"    put \"\" into node_script  put node_script&amp;\"on checkYoSelf\"&amp;return into node_script  put node_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script  put node_script&amp;\"end checkYoSelf\"&amp;return into node_script    set the script of button id node to node_script    put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script      makeNode    set the width of button id node to 10  set the height of button id node to 10  set the left of button id node to 356  set the top of button id node to 286  set the name of button id node to \"finale\"  set showName of button id node to false  set the style of button id node to oval  addcolor colorButton, cd, node, \"37632,30208,12288\"    put \"\" into node_script  put node_script&amp;\"on mouseUp\"&amp;return into node_script  put node_script&amp;\"  global cursor_x, cursor_y\"&amp;return into node_script  put node_script&amp;\"  if (cursor_x = 7) and (cursor_y = 7) then\"&amp;return into node_script  put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script  put node_script&amp;\"    send \"&amp;quote&amp;\"checkYoSelf\"&amp;quote&amp;\" to button path_extension\"&amp;return into node_script  put node_script&amp;\"    send \"&amp;quote&amp;\"checkSolution\"&amp;quote&amp;\" to this cd\"&amp;return into node_script  put node_script&amp;\"  end if\"&amp;return into node_script  put node_script&amp;\"end mouseUp\"&amp;return into node_script    set the script of button id node to node_script    put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script    put 0 into i  repeat for 7        put 0 into j    repeat for 8      makeNode            set the width of button id node to 30      set the height of button id node to 10            set the top of button id node to (61 + 30 * j)      set the left of button id node to (151 + 30 * i)            set the style of button id node to opaque      set the name of button id node to \"h_path_\"&amp;i&amp;\"_\"&amp;j            set showName of button id node to false            addcolor colorButton, cd, node, \"37632,30208,12288\"            put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script            get the script of button id node      put it into node_script            put \"active_\"&amp;i&amp;\"_\"&amp;j into f_node      put \"active_\"&amp;(i+1)&amp;\"_\"&amp;j into s_node            put node_script&amp;return into node_script      put node_script&amp;\"on checkYoSelf\"&amp;return into node_script      put node_script&amp;\"  global \"&amp;f_node&amp;\",\"&amp;s_node&amp;return into node_script      put node_script&amp;\"  if (\"&amp;f_node&amp;\" = true) and (\"&amp;s_node&amp;\" = true) then\"&amp;return into node_script      put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script      put node_script&amp;\"  end if\"&amp;return into node_script      put node_script&amp;\"end checkYoSelf\"&amp;return into node_script            set the script of button id node to node_script            put j+1 into j    end repeat        put i+1 into i  end repeat    put 0 into i  repeat for 8        put 0 into j    repeat for 7      makeNode            set the width of button id node to 10      set the height of button id node to 30            set the top of button id node to (66 + 30 * j)      set the left of button id node to (146 + 30 * i)            set the style of button id node to opaque      set the name of button id node to \"v_path_\"&amp;i&amp;\"_\"&amp;j            set showName of button id node to false            addcolor colorButton, cd, node, \"37632,30208,12288\"            put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script            get the script of button id node      put it into node_script            put \"active_\"&amp;i&amp;\"_\"&amp;j into f_node      put \"active_\"&amp;i&amp;\"_\"&amp;(j+1) into s_node            put node_script&amp;return into node_script      put node_script&amp;\"on checkYoSelf\"&amp;return into node_script      put node_script&amp;\"  global \"&amp;f_node&amp;\",\"&amp;s_node&amp;return into node_script      put node_script&amp;\"  if (\"&amp;f_node&amp;\" = true) and (\"&amp;s_node&amp;\" = true) then\"&amp;return into node_script      put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script      put node_script&amp;\"  end if\"&amp;return into node_script      put node_script&amp;\"end checkYoSelf\"&amp;return into node_script            set the script of button id node to node_script            put j+1 into j    end repeat        put i+1 into i  end repeat    put 0 into i  repeat for 8        put 0 into j    repeat for 8      makeNode            set the width of button id node to 10      set the height of button id node to 10            set the top of button id node to (61 + 30 * j)      set the left of button id node to (146 + 30 * i)            set the style of button id node to oval      set the name of button id node to \"button_\"&amp;i&amp;\"_\"&amp;j            set showName of button id node to false            addcolor colorButton, cd, node, \"37632,30208,12288\"            put \"active_\"&amp;i&amp;\"_\"&amp;j into v_name            put \"\" into node_script      put node_script&amp;\"on mouseUp\"&amp;return into node_script      put node_script&amp;\"  global \"&amp;v_name&amp;\",cursor_x,cursor_y\"&amp;return into node_script      put node_script&amp;\"  put cursor_x into prev_x\"&amp;return into node_script      put node_script&amp;\"  put cursor_y into prev_y\"&amp;return into node_script      put node_script&amp;\"  put abs(cursor_x-\"&amp;i&amp;\") into dx\"&amp;return into node_script      put node_script&amp;\"  put abs(cursor_y-\"&amp;j&amp;\") into dy\"&amp;return into node_script      put node_script&amp;\"  if (\"&amp;v_name&amp;\" = \"&amp;quote&amp;quote&amp;\") and ((dx = 1 and dy = 0) or (dx = 0 and dy = 1)) then\"&amp;return into node_script      put node_script&amp;\"    put true into \"&amp;v_name&amp;return into node_script      put node_script&amp;\"    send \"&amp;quote&amp;\"updateState \"&amp;i&amp;\",\"&amp;j&amp;quote&amp;\" to this cd\"&amp;return into node_script      put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script      put node_script&amp;\"  end if\"&amp;return into node_script      put node_script&amp;\"end mouseUp\"&amp;return into node_script            set the script of button id node to node_script            put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script            put j+1 into j    end repeat        put i+1 into i  end repeat    set the width of button button_0_0 to 30  set the height of button button_0_0 to 30    set the top of button button_0_0 to 51  set the left of button button_0_0 to 136    get the id of button button_0_0  addColor colorButton, cd, it, \"37632,30208,12288\"    put cd_script&amp;\"end openCard\"&amp;return into cd_script  set the script of this cd to cd_script  end constructPuzzleon checkSolution  global puzzle_id,path,constraints,flag_1,flag_2,flag_3  watnesssolver constraints,path  put the result into success  if success = \"true\" then    if puzzle_id = 1 then      decoder path,\"clrtffxpry\"      put the result into flag_1    end if    if puzzle_id = 2 then      decoder path,\"nyghq7xksg\"      put the result into flag_2    end if    if puzzle_id = 3 then      decoder path,\"ppyyvn}1{7\"      put the result into flag_3    end if  else    send opencard to this cd  end ifend checkSolutionon updateState i,j  global path,cursor_x,cursor_y    if (i &lt;&gt; 0) or (j &lt;&gt; 0) then    if (cursor_y = j+1) and (cursor_x = i) then      put path&amp;\"U\" into path    end if    if (cursor_y = j) and (cursor_x = i - 1) then      put path&amp;\"R\" into path    end if    if (cursor_y = j-1) and (cursor_x = i) then      put path&amp;\"D\" into path    end if    if (cursor_y = j) and (cursor_x = i + 1) then      put path&amp;\"L\" into path    end if  end if      if cursor_x &gt;= 0 and cursor_y &gt;= 0 then    put \"h_path_\"&amp;min(cursor_x, i)&amp;\"_\"&amp;min(cursor_y, j) into h_path    put \"v_path_\"&amp;min(cursor_x, i)&amp;\"_\"&amp;min(cursor_y, j) into v_path        if i = cursor_x then      send checkYoSelf to button v_path    end if        if j = cursor_y then      send checkYoSelf to button h_path    end if      end if    put i into cursor_x  put j into cursor_yend updateStateThe card’s script code can also be extracted (puzzle 1):on openCard  global puzzle_id,constraints,path,cursor_x,cursor_y,active_0_0,active_0_1,active_0_2,active_0_3,active_0_4,active_0_5,active_0_6,active_0_7,active_1_0,active_1_1,active_1_2,active_1_3,active_1_4,active_1_5,active_1_6,active_1_7,active_2_0,active_2_1,active_2_2,active_2_3,active_2_4,active_2_5,active_2_6,active_2_7,active_3_0,active_3_1,active_3_2,active_3_3,active_3_4,active_3_5,active_3_6,active_3_7,active_4_0,active_4_1,active_4_2,active_4_3,active_4_4,active_4_5,active_4_6,active_4_7,active_5_0,active_5_1,active_5_2,active_5_3,active_5_4,active_5_5,active_5_6,active_5_7,active_6_0,active_6_1,active_6_2,active_6_3,active_6_4,active_6_5,active_6_6,active_6_7,active_7_0,active_7_1,active_7_2,active_7_3,active_7_4,active_7_5,active_7_6,active_7_7,dummy  colorme  put 1 into puzzle_id  put -1 into cursor_x  put 0 into cursor_y  put \"\" into path  put \"rbrr rgb rb  r brgrbrgb  grrgbbg grg bgrg  bbgrbg\" into constraints  addColor colorButton, cd, 1, \"65535,0,0\"  ...end openCardon arrowKey key  if key = \"left\"then    go to cd \"entry-3-n\"  end if  if key = \"right\"then    go to cd \"entry-3-n\"  end if  if key = \"up\"then    go to cd \"\"  end ifend arrowKeyNow we get the constraint string of this puzzle \"rbrr rgb rb  r brgrbrgb  grrgbbg grg bgrg  bbgrbg\", these constraints, along with the path that goes to the lower right corner, are passed into one thing called XCMD which checks the path’s correctness natively (it contains binary instructions that directly run over the 68k CPU). There are 2 XCMD binaries which can be extracted by this tool, which seem can only run under MacOS. So I’m using the extracted binary from this great post for now instead.What’s more, I found that I can set breakpoints in the script and debug the game, I could even watch the variables on the fly:As for the XCMD part, it’s basically just a few hours’ reverse engineering work. Since there are currently no reliable decompilers for the 68k architecture, I have to read the assembly. It wasn’t too hard, but I did spend several hours learning the basic concepts of 68k’s instruction set.After the reverse engineering work, the watnesssolver’s checking methods can be rewritten in Python as:def build_automaton(constraints: str):    trans = str.maketrans(' rgb', '0123')    return [int(c) for c in constraints.translate(trans)]def choose_empty(r, g, b):    if g == 0 and b == 0:        return 0    if b &lt; g:        return 2    else:        return 3def choose_red(r, g, b):    if r != 2 and r != 3:        return 0    if b == 0 or g == 0:        return 0    return 1def choose_green(r, g, b):    if r &lt;= 4:        if b &lt;= 4:            if r == 2 or r == 3:                return 1            else:                return 2        else:            return 3    else:        return 0def choose_blue(r, g, b):    if r &lt;= 4:        if g &lt;= 4:            if r == 2 or r == 3:                return 1            else:                return 3        else:            return 2    else:        return 0def is_red(constraints, x, y):    if not (x &gt;= 0 and x &lt; 7 and y &gt;= 0 and y &lt; 7):        return False    return constraints[x+y*7] == 1def get_neighbors(constraints, x, y, color):    sum = 0    for bias_y in range(-1, 2):        for bias_x in range(-1, 2):            if (bias_x != 0 or bias_y != 0) and (y + bias_y &gt;= 0 and y + bias_y &lt; 7) and \\                    (x + bias_x &gt;= 0 and x + bias_x &lt; 7) and constraints[(x+bias_x)+(y+bias_y)*7] == color:                sum += 1    return sumdef step_automaton(constraints):    new_constraints = constraints[:]    for y in range(7):        for x in range(7):            r, g, b = \\                get_neighbors(constraints, x, y, 1), \\                get_neighbors(constraints, x, y, 2), \\                get_neighbors(constraints, x, y, 3)            if constraints[x+y*7] == 0:                new_constraints[x+y*7] = choose_empty(r, g, b)            elif constraints[x+y*7] == 1:                new_constraints[x+y*7] = choose_red(r, g, b)            elif constraints[x+y*7] == 2:                new_constraints[x+y*7] = choose_green(r, g, b)            elif constraints[x+y*7] == 3:                new_constraints[x+y*7] = choose_blue(r, g, b)    return new_constraintsdef perform_move(constraints, mem, x, y, d):    bias_x, bias_y = 0, 0    if d == 'U':        bias_x, bias_y = 0, -1    elif d == 'D':        bias_x, bias_y = 0, 1    elif d == 'L':        bias_x, bias_y = -1, 0    elif d == 'R':        bias_x, bias_y = 1, 0    if not (x+bias_x &gt;= 0 and x+bias_x &lt; 8 and y+bias_y &gt;= 0 and y+bias_y &lt; 8):        return False, x, y    min_x = min(x, x+bias_x)    min_y = min(y, y+bias_y)    if bias_y == 0:        if not (is_red(constraints, min_x, y) or is_red(constraints, min_x, y-1)):            return False, x, y    else:        if not (is_red(constraints, x, min_y) or is_red(constraints, x-1, min_y)):            return False, x, y    if mem[x+bias_x][y+bias_y] == 1:        return False, x, y    mem[x+bias_x][y+bias_y] = 1    return True, x+bias_x, y+bias_ydef solver(path, constraints):    x = y = 0    constraints = build_automaton(constraints)    mem = [[0 for i in range(8)] for j in range(8)]  # been to or not    mem[0][0] = 1    for each in path:        yes, new_x, new_y = perform_move(constraints, mem, x, y, each)        if yes:            if new_x == 7 and new_y == 7:                # print(f'Path `{path}` is great ' + '!' * 20)                return True, True            x, y = new_x, new_y            constraints = step_automaton(constraints)        else:            #print(f'Path `{path}` is bad')            return False, False    return True, FalseLooking around in the game, we’ll know that there are 3 puzzles we need to solve. So we can simply run 3 DFS searches on these contraints and three unique solutions will be printed out.def dfs(depth, path, constraints):    if depth &gt; 24: # figured out after multiple tests        return    mov, end = solver(path, constraints)    if end == True:        print(f'Path {path} is ok')    if mov == False:        return    for d in 'LRUD':        n_path = path + d        dfs(depth+1, n_path, constraints)if __name__ == '__main__':    constraints_stage1 = 'rbrr rgb rb  r brgrbrgb  grrgbbg grg bgrg  bbgrbg'    constraints_stage2 = 'rbr  bbggrgrggb   bggbb b  b bbrbbgg gbrrbgrbbb g'    constraints_stage3 = 'rrbrb rg g  bgrbgggr ggrgr gr rg brr  b  bggrbgbb'    print('Stage1 solution:')    dfs(0, '', constraints_stage1)    print('Stage2 solution:')    dfs(0, '', constraints_stage2)    print('Stage3 solution:')    dfs(0, '', constraints_stage3)Output:Stage1 solution:Path RDDDRURRRDLLDLDRRURRDDDR is okStage2 solution:Path RDDRURDDDRURULURRDDDDDRD is okStage3 solution:Path DRDDDDRUURRRULURRDDDDDDR is okInput these solutions to each puzzle, after that, we could go to the lock-like thing on the white gate to reveal the flag:",
            "content_html": "<h2 id=\"intro\">Intro</h2><p>Recently in PlaidCTF2020 there was a RE challenge called <em>The Watness 2</em>, which is a game that requires the application <em>HyperCard</em> to run. Since I did not have a Macbook computer, I’d been struggling figuring out ways to run this game over my Windows 10 laptop. Here is how I finally managed to do that.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Follow <a href=\"https://www.youtube.com/watch?v=TY3pjSGg1y4\">this great video tutorial</a></li>  <li>Download <a href=\"https://www.macintoshrepository.org/2475-stuffit-expander-and-dropstuff-5-5\">StuffitExpander</a>, add it to the volumes’ list, install it inside the VM:</li></ul><p><img src=\"/assets/HypercardOverWindows/1587369699146.png\" alt=\"1587369699146\" /></p><ul>  <li>Download <a href=\"https://macintoshgarden.org/apps/hypercard-241\">HyperCard 2.4</a>, install it inside the VM as described above</li>  <li>Extract the .rc1 file from the .sit file and open it with a simple double-click:</li></ul><p><img src=\"/assets/HypercardOverWindows/1587369949569.png\" alt=\"1587369949569\" /></p><h3 id=\"challenge-solution\">Challenge Solution</h3><p>Extract the stack’s script code:</p><p><img src=\"/assets/HypercardOverWindows/1587389434804.png\" alt=\"1587389434804\" /></p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>on openCard  Send colorMe to this card  pass openCardend openCardon closeCard  global prev_card  get the id of this cd  put it into prev_card  lock screen  pass closeCardend closeCardon colorMe  AddColor colorCard,stamp,0end colorMeon openStack  AddColor install  setupMenu  go to card \"tun-1-n\"  pass openStackend openStackon closeStack  AddColor remove  pass closeStackend closeStackon genPuzzle  send \"doMenu New Button\" to Hypercardend genPuzzleon initCard  answer prev_cardend initCardon menuReset  setupMenu  pass menuResetend menuReseton setupMenu  if there is not a menu \"Watness\" then    create menu \"Watness\"    put \"Generate Puzzle\"&amp;return&amp;\"Init Card\"&amp;return&amp;\"Set up Nav\"&amp;return&amp;\"Create Puzzle\" into menu \"Watness\" with menuMsg genPuzzle,initCard,setupNav,constructPuzzle  end ifend setupMenuon setupNav  ask \"What is the name of this card\"  set name of this cd to it    ask \"Where should the left go?\"  put it into left_loc  send \"doMenu New Button\" to Hypercard  set height of the last button to 342  set width of the last button to 100  set topleft of the last button to \"0,0\"  set style of the last button to \"transparent\"  set name of the last button to \"\"  put \"on mouseUp\"&amp;return&amp;\"go to card \"&amp;quote&amp;\"\"&amp;left_loc&amp;quote&amp;return&amp;\"end mouseUp\" into left_script  set script of last button to left_script    ask \"Where should the right go?\"  put it into right_loc  send \"doMenu New Button\" to Hypercard  set height of the last button to 342  set width of the last button to 100  set topleft of the last button to \"412,0\"  set style of the last button to \"transparent\"  set name of the last button to \"\"  put \"on mouseUp\"&amp;return&amp;\"go to card \"&amp;quote&amp;\"\"&amp;right_loc&amp;quote&amp;return&amp;\"end mouseUp\" into right_script  set script of last button to right_script    ask \"Where should fwd go?\"  put it into fwd_loc  send \"doMenu New Button\" to Hypercard  set height of the last button to 342  set width of the last button to 311  set the top of the last button to 0  set the left of the last button to 100  set style of the last button to \"transparent\"  set name of the last button to \"\"  put \"on mouseUp\"&amp;return&amp;\"go to card \"&amp;quote&amp;\"\"&amp;fwd_loc&amp;quote&amp;return&amp;\"end mouseUp\" into fwd_script  set script of last button to fwd_script    get the script of this card  put it into cd_script  put cd_script&amp;return into cd_script  put cd_script&amp;\"on arrowKey key\"&amp;return into cd_script  put cd_script&amp;\" if key = \"&amp;quote&amp;\"left\"&amp;quote&amp;\"then\"&amp;return into cd_script  put cd_script&amp;\"  go to cd \"&amp;quote&amp;left_loc&amp;quote&amp;return into cd_script  put cd_script&amp;\" end if\"&amp;return into cd_script  put cd_script&amp;\" if key = \"&amp;quote&amp;\"right\"&amp;quote&amp;\"then\"&amp;return into cd_script  put cd_script&amp;\"  go to cd \"&amp;quote&amp;right_loc&amp;quote&amp;return into cd_script  put cd_script&amp;\" end if\"&amp;return into cd_script  put cd_script&amp;\" if key = \"&amp;quote&amp;\"up\"&amp;quote&amp;\"then\"&amp;return into cd_script  put cd_script&amp;\"  go to cd \"&amp;quote&amp;fwd_loc&amp;quote&amp;return into cd_script  put cd_script&amp;\" end if\"&amp;return into cd_script  put cd_script&amp;\"end arrowKey\"&amp;return into cd_script      set the script of this cd to cd_scriptend setupNavon makeNode  global node  send \"doMenu New Button\" to Hypercard  put the id of the last button into nodeend makeNodeon constructPuzzle  global node,constraints    ask \"What are the constraints\"  put it into constraints    get the script of this cd  put it into cd_script  put cd_script&amp;return into cd_script  put cd_script&amp;\"on openCard\"&amp;return into cd_script  put cd_script&amp;\"  global constraints,path,cursor_x,cursor_y,\" into cd_script    put 0 into i  repeat for 8        put 0 into j    repeat for 8      put cd_script&amp;\"active_\"&amp;i&amp;\"_\"&amp;j&amp;\",\" into cd_script            put j+1 into j    end repeat        put i+1 into i  end repeat    put cd_script&amp;\"dummy\"&amp;return into cd_script  put cd_script&amp;\"  colorme\"&amp;return into cd_script  put cd_script&amp;\"  put -1 into cursor_x\"&amp;return into cd_script  put cd_script&amp;\"  put 0 into cursor_y\"&amp;return into cd_script  put cd_script&amp;\"  put \"&amp;quote&amp;quote&amp;\" into path\"&amp;return into cd_script  put cd_script&amp;\"  put \"&amp;quote&amp;constraints&amp;quote&amp;\" into constraints\"&amp;return into cd_script    put 1 into c_i  put 0 into i  repeat for 7        put 0 into j    repeat for 7      get char (j*7+i+1) of constraints      put it into letter            if letter &lt;&gt; \" \" then        makeNode                set the width of button id node to 10        set the height of button id node to 10                set the top of button id node to (76 + j * 30)        set the left of button id node to (161 + i * 30)                set the style of button id node to \"opaque\"        set showName of button id node to false                if letter = \"r\" then          put \"65535,0,0\" into node_color        end if        if letter = \"g\" then          put \"0,65535,0\" into node_color        end if        if letter = \"b\" then          put \"0,0,65535\" into node_color        end if                if letter &lt;&gt; \" \" then          addColor colorButton, cd, node, node_color                    put cd_script&amp;\"  addColor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;node_color&amp;quote&amp;return into cd_script        end if      end if                        put j+1 into j    end repeat        put i+1 into i  end repeat        put 0 into i  repeat for 8        put 0 into j    repeat for 8      put cd_script&amp;\"  put \"&amp;quote&amp;quote&amp;\" into active_\"&amp;i&amp;\"_\"&amp;j&amp;return into cd_script            put j+1 into j    end repeat        put i+1 into i  end repeat    makeNode    set the width of button id node to 10  set the height of button id node to 15  set the left of button id node to 356  set the top of button id node to 276  set the name of button id node to \"path_extension\"  set showName of button id node to false  set the style of button id node to opaque  addcolor colorButton, cd, node, \"37632,30208,12288\"    put \"\" into node_script  put node_script&amp;\"on checkYoSelf\"&amp;return into node_script  put node_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script  put node_script&amp;\"end checkYoSelf\"&amp;return into node_script    set the script of button id node to node_script    put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script      makeNode    set the width of button id node to 10  set the height of button id node to 10  set the left of button id node to 356  set the top of button id node to 286  set the name of button id node to \"finale\"  set showName of button id node to false  set the style of button id node to oval  addcolor colorButton, cd, node, \"37632,30208,12288\"    put \"\" into node_script  put node_script&amp;\"on mouseUp\"&amp;return into node_script  put node_script&amp;\"  global cursor_x, cursor_y\"&amp;return into node_script  put node_script&amp;\"  if (cursor_x = 7) and (cursor_y = 7) then\"&amp;return into node_script  put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script  put node_script&amp;\"    send \"&amp;quote&amp;\"checkYoSelf\"&amp;quote&amp;\" to button path_extension\"&amp;return into node_script  put node_script&amp;\"    send \"&amp;quote&amp;\"checkSolution\"&amp;quote&amp;\" to this cd\"&amp;return into node_script  put node_script&amp;\"  end if\"&amp;return into node_script  put node_script&amp;\"end mouseUp\"&amp;return into node_script    set the script of button id node to node_script    put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script    put 0 into i  repeat for 7        put 0 into j    repeat for 8      makeNode            set the width of button id node to 30      set the height of button id node to 10            set the top of button id node to (61 + 30 * j)      set the left of button id node to (151 + 30 * i)            set the style of button id node to opaque      set the name of button id node to \"h_path_\"&amp;i&amp;\"_\"&amp;j            set showName of button id node to false            addcolor colorButton, cd, node, \"37632,30208,12288\"            put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script            get the script of button id node      put it into node_script            put \"active_\"&amp;i&amp;\"_\"&amp;j into f_node      put \"active_\"&amp;(i+1)&amp;\"_\"&amp;j into s_node            put node_script&amp;return into node_script      put node_script&amp;\"on checkYoSelf\"&amp;return into node_script      put node_script&amp;\"  global \"&amp;f_node&amp;\",\"&amp;s_node&amp;return into node_script      put node_script&amp;\"  if (\"&amp;f_node&amp;\" = true) and (\"&amp;s_node&amp;\" = true) then\"&amp;return into node_script      put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script      put node_script&amp;\"  end if\"&amp;return into node_script      put node_script&amp;\"end checkYoSelf\"&amp;return into node_script            set the script of button id node to node_script            put j+1 into j    end repeat        put i+1 into i  end repeat    put 0 into i  repeat for 8        put 0 into j    repeat for 7      makeNode            set the width of button id node to 10      set the height of button id node to 30            set the top of button id node to (66 + 30 * j)      set the left of button id node to (146 + 30 * i)            set the style of button id node to opaque      set the name of button id node to \"v_path_\"&amp;i&amp;\"_\"&amp;j            set showName of button id node to false            addcolor colorButton, cd, node, \"37632,30208,12288\"            put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script            get the script of button id node      put it into node_script            put \"active_\"&amp;i&amp;\"_\"&amp;j into f_node      put \"active_\"&amp;i&amp;\"_\"&amp;(j+1) into s_node            put node_script&amp;return into node_script      put node_script&amp;\"on checkYoSelf\"&amp;return into node_script      put node_script&amp;\"  global \"&amp;f_node&amp;\",\"&amp;s_node&amp;return into node_script      put node_script&amp;\"  if (\"&amp;f_node&amp;\" = true) and (\"&amp;s_node&amp;\" = true) then\"&amp;return into node_script      put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script      put node_script&amp;\"  end if\"&amp;return into node_script      put node_script&amp;\"end checkYoSelf\"&amp;return into node_script            set the script of button id node to node_script            put j+1 into j    end repeat        put i+1 into i  end repeat    put 0 into i  repeat for 8        put 0 into j    repeat for 8      makeNode            set the width of button id node to 10      set the height of button id node to 10            set the top of button id node to (61 + 30 * j)      set the left of button id node to (146 + 30 * i)            set the style of button id node to oval      set the name of button id node to \"button_\"&amp;i&amp;\"_\"&amp;j            set showName of button id node to false            addcolor colorButton, cd, node, \"37632,30208,12288\"            put \"active_\"&amp;i&amp;\"_\"&amp;j into v_name            put \"\" into node_script      put node_script&amp;\"on mouseUp\"&amp;return into node_script      put node_script&amp;\"  global \"&amp;v_name&amp;\",cursor_x,cursor_y\"&amp;return into node_script      put node_script&amp;\"  put cursor_x into prev_x\"&amp;return into node_script      put node_script&amp;\"  put cursor_y into prev_y\"&amp;return into node_script      put node_script&amp;\"  put abs(cursor_x-\"&amp;i&amp;\") into dx\"&amp;return into node_script      put node_script&amp;\"  put abs(cursor_y-\"&amp;j&amp;\") into dy\"&amp;return into node_script      put node_script&amp;\"  if (\"&amp;v_name&amp;\" = \"&amp;quote&amp;quote&amp;\") and ((dx = 1 and dy = 0) or (dx = 0 and dy = 1)) then\"&amp;return into node_script      put node_script&amp;\"    put true into \"&amp;v_name&amp;return into node_script      put node_script&amp;\"    send \"&amp;quote&amp;\"updateState \"&amp;i&amp;\",\"&amp;j&amp;quote&amp;\" to this cd\"&amp;return into node_script      put node_script&amp;\"    addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"65535,65535,30000\"&amp;quote&amp;return into node_script      put node_script&amp;\"  end if\"&amp;return into node_script      put node_script&amp;\"end mouseUp\"&amp;return into node_script            set the script of button id node to node_script            put cd_script&amp;\"  addcolor colorButton, cd, \"&amp;node&amp;\", \"&amp;quote&amp;\"37632,30208,12288\"&amp;quote&amp;return into cd_script            put j+1 into j    end repeat        put i+1 into i  end repeat    set the width of button button_0_0 to 30  set the height of button button_0_0 to 30    set the top of button button_0_0 to 51  set the left of button button_0_0 to 136    get the id of button button_0_0  addColor colorButton, cd, it, \"37632,30208,12288\"    put cd_script&amp;\"end openCard\"&amp;return into cd_script  set the script of this cd to cd_script  end constructPuzzleon checkSolution  global puzzle_id,path,constraints,flag_1,flag_2,flag_3  watnesssolver constraints,path  put the result into success  if success = \"true\" then    if puzzle_id = 1 then      decoder path,\"clrtffxpry\"      put the result into flag_1    end if    if puzzle_id = 2 then      decoder path,\"nyghq7xksg\"      put the result into flag_2    end if    if puzzle_id = 3 then      decoder path,\"ppyyvn}1{7\"      put the result into flag_3    end if  else    send opencard to this cd  end ifend checkSolutionon updateState i,j  global path,cursor_x,cursor_y    if (i &lt;&gt; 0) or (j &lt;&gt; 0) then    if (cursor_y = j+1) and (cursor_x = i) then      put path&amp;\"U\" into path    end if    if (cursor_y = j) and (cursor_x = i - 1) then      put path&amp;\"R\" into path    end if    if (cursor_y = j-1) and (cursor_x = i) then      put path&amp;\"D\" into path    end if    if (cursor_y = j) and (cursor_x = i + 1) then      put path&amp;\"L\" into path    end if  end if      if cursor_x &gt;= 0 and cursor_y &gt;= 0 then    put \"h_path_\"&amp;min(cursor_x, i)&amp;\"_\"&amp;min(cursor_y, j) into h_path    put \"v_path_\"&amp;min(cursor_x, i)&amp;\"_\"&amp;min(cursor_y, j) into v_path        if i = cursor_x then      send checkYoSelf to button v_path    end if        if j = cursor_y then      send checkYoSelf to button h_path    end if      end if    put i into cursor_x  put j into cursor_yend updateState</code></pre></div></div><p>The card’s script code can also be extracted (puzzle 1):</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>on openCard  global puzzle_id,constraints,path,cursor_x,cursor_y,active_0_0,active_0_1,active_0_2,active_0_3,active_0_4,active_0_5,active_0_6,active_0_7,active_1_0,active_1_1,active_1_2,active_1_3,active_1_4,active_1_5,active_1_6,active_1_7,active_2_0,active_2_1,active_2_2,active_2_3,active_2_4,active_2_5,active_2_6,active_2_7,active_3_0,active_3_1,active_3_2,active_3_3,active_3_4,active_3_5,active_3_6,active_3_7,active_4_0,active_4_1,active_4_2,active_4_3,active_4_4,active_4_5,active_4_6,active_4_7,active_5_0,active_5_1,active_5_2,active_5_3,active_5_4,active_5_5,active_5_6,active_5_7,active_6_0,active_6_1,active_6_2,active_6_3,active_6_4,active_6_5,active_6_6,active_6_7,active_7_0,active_7_1,active_7_2,active_7_3,active_7_4,active_7_5,active_7_6,active_7_7,dummy  colorme  put 1 into puzzle_id  put -1 into cursor_x  put 0 into cursor_y  put \"\" into path  put \"rbrr rgb rb  r brgrbrgb  grrgbbg grg bgrg  bbgrbg\" into constraints  addColor colorButton, cd, 1, \"65535,0,0\"  ...end openCardon arrowKey key  if key = \"left\"then    go to cd \"entry-3-n\"  end if  if key = \"right\"then    go to cd \"entry-3-n\"  end if  if key = \"up\"then    go to cd \"\"  end ifend arrowKey</code></pre></div></div><p>Now we get the constraint string of this puzzle <code class=\"highlighter-rouge\">\"rbrr rgb rb  r brgrbrgb  grrgbbg grg bgrg  bbgrbg\"</code>, these constraints, along with the path that goes to the lower right corner, are passed into one thing called <em>XCMD</em> which checks the path’s correctness natively (it contains binary instructions that directly run over the 68k CPU). There are 2 XCMD binaries which can be extracted by <a href=\"https://github.com/PierreLorenzi/HyperCardPreview\">this tool</a>, which seem can only run under MacOS. So I’m using the extracted binary from <a href=\"https://ctf.harrisongreen.me/2020/plaidctf/the_watness_2/\">this</a> great post for now instead.</p><p>What’s more, I found that I can set breakpoints in the script and debug the game, I could even watch the variables on the fly:</p><p><img src=\"/assets/HypercardOverWindows/1588514193878.png\" alt=\"1588514193878\" /></p><p>As for the XCMD part, it’s basically just a few hours’ reverse engineering work. Since there are currently no reliable decompilers for the 68k architecture, I have to read the assembly. It wasn’t too hard, but I did spend several hours learning the basic concepts of 68k’s instruction set.</p><p>After the reverse engineering work, the watnesssolver’s checking methods can be rewritten in Python as:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">build_automaton</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>    <span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">maketrans</span><span class=\"p\">(</span><span class=\"s\">' rgb'</span><span class=\"p\">,</span> <span class=\"s\">'0123'</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">constraints</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">trans</span><span class=\"p\">)]</span><span class=\"k\">def</span> <span class=\"nf\">choose_empty</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">g</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span>    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">g</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">2</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">3</span><span class=\"k\">def</span> <span class=\"nf\">choose_red</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span>    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">g</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span>    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"k\">def</span> <span class=\"nf\">choose_green</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>            <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"mi\">1</span>            <span class=\"k\">else</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"mi\">2</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"mi\">3</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"k\">def</span> <span class=\"nf\">choose_blue</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">g</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>            <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"mi\">1</span>            <span class=\"k\">else</span><span class=\"p\">:</span>                <span class=\"k\">return</span> <span class=\"mi\">3</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"mi\">2</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"k\">def</span> <span class=\"nf\">is_red</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span>    <span class=\"k\">return</span> <span class=\"n\">constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"k\">def</span> <span class=\"nf\">get_neighbors</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">):</span>    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"k\">for</span> <span class=\"n\">bias_y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>        <span class=\"k\">for</span> <span class=\"n\">bias_x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bias_x</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">bias_y</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">bias_y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">bias_y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\                    <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">bias_x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">bias_x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">constraints</span><span class=\"p\">[(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">color</span><span class=\"p\">:</span>                <span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"k\">def</span> <span class=\"nf\">step_automaton</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">):</span>    <span class=\"n\">new_constraints</span> <span class=\"o\">=</span> <span class=\"n\">constraints</span><span class=\"p\">[:]</span>    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span>        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">):</span>            <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> \\                <span class=\"n\">get_neighbors</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> \\                <span class=\"n\">get_neighbors</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> \\                <span class=\"n\">get_neighbors</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>            <span class=\"k\">if</span> <span class=\"n\">constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>                <span class=\"n\">new_constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">choose_empty</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>            <span class=\"k\">elif</span> <span class=\"n\">constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>                <span class=\"n\">new_constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">choose_red</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>            <span class=\"k\">elif</span> <span class=\"n\">constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>                <span class=\"n\">new_constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">choose_green</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>            <span class=\"k\">elif</span> <span class=\"n\">constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>                <span class=\"n\">new_constraints</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">choose_blue</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"n\">new_constraints</span><span class=\"k\">def</span> <span class=\"nf\">perform_move</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>    <span class=\"n\">bias_x</span><span class=\"p\">,</span> <span class=\"n\">bias_y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>    <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"s\">'U'</span><span class=\"p\">:</span>        <span class=\"n\">bias_x</span><span class=\"p\">,</span> <span class=\"n\">bias_y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span>    <span class=\"k\">elif</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"s\">'D'</span><span class=\"p\">:</span>        <span class=\"n\">bias_x</span><span class=\"p\">,</span> <span class=\"n\">bias_y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>    <span class=\"k\">elif</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"s\">'L'</span><span class=\"p\">:</span>        <span class=\"n\">bias_x</span><span class=\"p\">,</span> <span class=\"n\">bias_y</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>    <span class=\"k\">elif</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"s\">'R'</span><span class=\"p\">:</span>        <span class=\"n\">bias_x</span><span class=\"p\">,</span> <span class=\"n\">bias_y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span> <span class=\"ow\">and</span> <span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>    <span class=\"n\">min_x</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span><span class=\"p\">)</span>    <span class=\"n\">min_y</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">bias_y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">is_red</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">min_x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">is_red</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">min_x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)):</span>            <span class=\"k\">return</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">is_red</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">min_y</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">is_red</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">min_y</span><span class=\"p\">)):</span>            <span class=\"k\">return</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>    <span class=\"k\">if</span> <span class=\"n\">mem</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>    <span class=\"n\">mem</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>    <span class=\"k\">return</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">bias_x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">bias_y</span><span class=\"k\">def</span> <span class=\"nf\">solver</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">):</span>    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"n\">build_automaton</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">)</span>    <span class=\"n\">mem</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)]</span>  <span class=\"c1\"># been to or not</span>    <span class=\"n\">mem</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>    <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">:</span>        <span class=\"n\">yes</span><span class=\"p\">,</span> <span class=\"n\">new_x</span><span class=\"p\">,</span> <span class=\"n\">new_y</span> <span class=\"o\">=</span> <span class=\"n\">perform_move</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">each</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">yes</span><span class=\"p\">:</span>            <span class=\"k\">if</span> <span class=\"n\">new_x</span> <span class=\"o\">==</span> <span class=\"mi\">7</span> <span class=\"ow\">and</span> <span class=\"n\">new_y</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>                <span class=\"c1\"># print(f'Path `{path}` is great ' + '!' * 20)</span>                <span class=\"k\">return</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">True</span>            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">new_x</span><span class=\"p\">,</span> <span class=\"n\">new_y</span>            <span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"n\">step_automaton</span><span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"c1\">#print(f'Path `{path}` is bad')</span>            <span class=\"k\">return</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"bp\">False</span>    <span class=\"k\">return</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span></code></pre></div></div><p>Looking around in the game, we’ll know that there are 3 puzzles we need to solve. So we can simply run 3 DFS searches on these contraints and three unique solutions will be printed out.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">depth</span> <span class=\"o\">&gt;</span> <span class=\"mi\">24</span><span class=\"p\">:</span> <span class=\"c1\"># figured out after multiple tests</span>        <span class=\"k\">return</span>    <span class=\"n\">mov</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">end</span> <span class=\"o\">==</span> <span class=\"bp\">True</span><span class=\"p\">:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'Path {path} is ok'</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">mov</span> <span class=\"o\">==</span> <span class=\"bp\">False</span><span class=\"p\">:</span>        <span class=\"k\">return</span>    <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"s\">'LRUD'</span><span class=\"p\">:</span>        <span class=\"n\">n_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"n\">d</span>        <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_path</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">)</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>    <span class=\"n\">constraints_stage1</span> <span class=\"o\">=</span> <span class=\"s\">'rbrr rgb rb  r brgrbrgb  grrgbbg grg bgrg  bbgrbg'</span>    <span class=\"n\">constraints_stage2</span> <span class=\"o\">=</span> <span class=\"s\">'rbr  bbggrgrggb   bggbb b  b bbrbbgg gbrrbgrbbb g'</span>    <span class=\"n\">constraints_stage3</span> <span class=\"o\">=</span> <span class=\"s\">'rrbrb rg g  bgrbgggr ggrgr gr rg brr  b  bggrbgbb'</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Stage1 solution:'</span><span class=\"p\">)</span>    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">constraints_stage1</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Stage2 solution:'</span><span class=\"p\">)</span>    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">constraints_stage2</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Stage3 solution:'</span><span class=\"p\">)</span>    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">constraints_stage3</span><span class=\"p\">)</span></code></pre></div></div><p>Output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Stage1 solution:Path RDDDRURRRDLLDLDRRURRDDDR is okStage2 solution:Path RDDRURDDDRURULURRDDDDDRD is okStage3 solution:Path DRDDDDRUURRRULURRDDDDDDR is ok</code></pre></div></div><p>Input these solutions to each puzzle, after that, we could go to the lock-like thing on the white gate to reveal the flag:</p><p><img src=\"/assets/HypercardOverWindows/1588514105474.png\" alt=\"1588514105474\" /></p>",
            "url": "http://localhost:4000/2020/04/20/hypercard-over-windows",
            
            
            
            "tags": ["Write-up","Reverse Engineering","Hypercard","CTF","PlaidCTF2020"],
            
            "date_published": "2020-04-20T00:00:00+08:00",
            "date_modified": "2020-04-20T00:00:00+08:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/03/12/write-invalid-and-cache-coherence",
            "title": "Write Invalid and Cache Coherence",
            "summary": null,
            "content_text": "// This post was written in ChineseIntro今天分布式听飘了，个人感觉老师放的课件对问题的描述以及解答有些欠缺，后来做了些资料检索，对下面这个简单问题做了些总结：对于 write-update、write-invalidate 两种 coherence protocol，哪一种在生产消费者模型下的性能更差？首先得知道 coherence protocol 的目的是什么，它的目的很简单：保证多处理器系统下的数据一致性。有两类这种协议，一种是 snoopy-based 另一种是 directory-based（当然还有一个 shared caches 概念这里也不讨论了），对于前者来说，所有读写、更新操作都以类似广播的方式发给所有处理器，每个处理器相应地 snoop and respond，write-update 和 write-invalid 都是属于这一类，这两种方式的定义分别如下：  Write-update: When a write operation is observed to a location that a cache has a copy of, the cache controller updates its own copy of the snooped memory location with the new data.  Write-invalidate: When a write operation is observed to a location that a cache has a copy of, the cache controller invalidates its own copy of the snooped memory location, which forces a read from main memory of the new value on its next access.Write-invalidate 在一些情况下的优势是很明显的，例如突发大量对单个单元写请求的情况下，它比 write-update 有更好的效果，其每次对内存单元的更新不会引起其他 cache 的更新，因为这个时候其他单元不一定总有 read 请求，write 之后只会对这个内存对应的 cache（其 copy）做一个 invalid 标记，并且在做标记之前如果发现已经是 invalid 状态就不用更新了，因此在没有 read 的情况下只需要发送一次 invalidation 广播，下次其他单元需要访问相应内存时检测到自己 cache 上的 invalid 标记就直接去主存里取数据并更新自己的 cache。此外还有一种情况，例如 writes to different words of a block，write-update 在每一个 word 写操作都会发送一次更新请求，而 write-invalidate 由于同理也只会发送一次 invalidation 广播。但是对于 producer-consumer 模型而言，producer 的每次更新都要等待一个 consumer 来消费，这就是与之前两种情况不同的一点。这种情况下如果每次还是采用广播 invalidate 消息的方法，下一次某个 consumer 消费的时候检测到自己 cache invalid 状态后便还需要去访问主存，这是完全多余的了，因为我们完全可以在生成好之后直接更新 consumer 的 cache，这样只需要一次写会主存的操作而不是两次。因此这时 write-update 优于 write-invalidate。总结一下，对于大量连续的写请求来说，write-invalidate 更好，对于 producer-consumer 这种供需平衡的模型来说 write-update 更优。关于 cache coherency 这方面还有许多复杂并且值得探讨的问题，但由于它们太过学术我没有去深究。References  https://www3.nd.edu/~mniemier/teaching/2010_B_Fall/lectures/lec_27_slides.pdf.  https://www.cs.utah.edu/~retrac/papers/hpca07.pdf.",
            "content_html": "<p>// This post was written in Chinese</p><h2 id=\"intro\">Intro</h2><p>今天分布式听飘了，个人感觉老师放的课件对问题的描述以及解答有些欠缺，后来做了些资料检索，对下面这个简单问题做了些总结：</p><p>对于 write-update、write-invalidate 两种 coherence protocol，哪一种在生产消费者模型下的性能更差？</p><hr /><p>首先得知道 coherence protocol 的目的是什么，它的目的很简单：保证多处理器系统下的数据一致性。</p><p>有两类这种协议，一种是 snoopy-based 另一种是 directory-based（当然还有一个 shared caches 概念这里也不讨论了），对于前者来说，所有读写、更新操作都以类似广播的方式发给所有处理器，每个处理器相应地 snoop and respond，write-update 和 write-invalid 都是属于这一类，这两种方式的定义分别如下：</p><ul>  <li>Write-update: When a write operation is observed to a location that a cache has a copy of, the cache controller updates its own copy of the snooped memory location with the new data.</li>  <li>Write-invalidate: When a write operation is observed to a location that a cache has a copy of, the cache controller invalidates its own copy of the snooped memory location, which forces a read from main memory of the new value on its next access.</li></ul><p>Write-invalidate 在一些情况下的优势是很明显的，例如突发大量对单个单元写请求的情况下，它比 write-update 有更好的效果，其每次对内存单元的更新不会引起其他 cache 的更新，因为这个时候其他单元不一定总有 read 请求，write 之后只会对这个内存对应的 cache（其 copy）做一个 invalid 标记，并且在做标记之前如果发现已经是 invalid 状态就不用更新了，因此在没有 read 的情况下只需要发送一次 invalidation 广播，下次其他单元需要访问相应内存时检测到自己 cache 上的 invalid 标记就直接去主存里取数据并更新自己的 cache。</p><p>此外还有一种情况，例如 writes to different words of a block，write-update 在每一个 word 写操作都会发送一次更新请求，而 write-invalidate 由于同理也只会发送一次 invalidation 广播。</p><p>但是对于 producer-consumer 模型而言，producer 的每次更新都要等待一个 consumer 来消费，这就是与之前两种情况不同的一点。这种情况下如果每次还是采用广播 invalidate 消息的方法，下一次某个 consumer 消费的时候检测到自己 cache invalid 状态后便还需要去访问主存，这是完全多余的了，因为我们完全可以在生成好之后直接更新 consumer 的 cache，这样只需要一次写会主存的操作而不是两次。因此这时 write-update 优于 write-invalidate。</p><p>总结一下，对于大量连续的写请求来说，write-invalidate 更好，对于 producer-consumer 这种供需平衡的模型来说 write-update 更优。</p><hr /><p>关于 cache coherency 这方面还有许多复杂并且值得探讨的问题，但由于它们太过学术我没有去深究。</p><p><strong>References</strong></p><ul>  <li>https://www3.nd.edu/~mniemier/teaching/2010_B_Fall/lectures/lec_27_slides.pdf.</li>  <li>https://www.cs.utah.edu/~retrac/papers/hpca07.pdf.</li></ul>",
            "url": "http://localhost:4000/2020/03/12/write-invalid-and-cache-coherence",
            
            
            
            "tags": ["distributed computing","cache coherence","write-invalid","class notes"],
            
            "date_published": "2020-03-12T00:00:00+08:00",
            "date_modified": "2020-03-12T00:00:00+08:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/02/20/ancient-game-v2",
            "title": "D^3CTF2019 Ancient Game V2, Thoughts & Solutions",
            "summary": null,
            "content_text": "IntroI designed the RE challenge Ancient Game V2 in D^3CTF2019. This post is about some related stuff along with the chal’s solution.ChallengeThis challenge uses a virtual architecture similar to OISC to implement a classic Sudoku verification. There are basically just 4 types of instructions: input, output, jcc and NAND, which can also be seen as an OISC with two I/O interrupts introduced. All logical operations are implemented through NAND gates.Operations like XOR / AND / OR are all implemented by combinations of NAND gates, for example:xor x,y =&gt;xor_tmp[0] = y NAND yxor_tmp[1] = x NAND xor_tmp[0]xor_tmp[2] = x NAND xxor_tmp[3] = y NAND xor_tmp[2]x = xor_tmp[1] NAND xor_tmp[3]Which is based on the fact that:Q = A XOR B = [ B NAND ( A NAND A ) ] NAND [ A NAND ( B NAND B ) ]An excerpt of the Sudoku Verifier code in my self-defined assembly:welcome = mkstr(\"**************************\\n**  Welcome To D^3CTF   **\\n**   Ancient Game V2    **\\n**************************\\n\\nInput Flag:\")wrong = mkstr(\"\\nSorry, please try again.\\n\")correct = mkstr(\"\\nCorrect.\\n\")flag = new(50)// distract = new(1000)grid = new(81)// initialize the puzzleset(grid[0],9)set(grid[5],8)set(grid[9],1)set(grid[10],3)set(grid[14],9)set(grid[16],7)...set(grid[71],6)set(grid[75],9)set(grid[80],1)__code_start__// print the welcome messageprint(welcome)// get inputinput(flag[0])input(flag[1])input(flag[2])input(flag[3])input(flag[4])input(flag[5])...input(flag[46])input(flag[47])input(flag[48])input(flag[49])// transfer chars in the flag into the gridslong_transfer(flag[0],grid[1])long_transfer(flag[1],grid[2])...long_transfer(flag[47],grid[77])long_transfer(flag[48],grid[78])long_transfer(flag[49],grid[79])// xor with xor_table, which is introduced //   for generating different flags to different teamsgrid[1] = grid[1] ^ xor_table[0]grid[2] = grid[2] ^ xor_table[1]grid[3] = grid[3] ^ xor_table[2]grid[4] = grid[4] ^ xor_table[3]grid[6] = grid[6] ^ xor_table[4]grid[7] = grid[7] ^ xor_table[5]...grid[77] = grid[77] ^ xor_table[47]grid[78] = grid[78] ^ xor_table[48]grid[79] = grid[79] ^ xor_table[49]// verify the sudoku game// rowsjmp _label_wrong if grid[4] == grid[5]jmp _label_wrong if grid[4] == grid[6]jmp _label_wrong if grid[4] == grid[7]...jmp _label_wrong if grid[3] == grid[7]jmp _label_wrong if grid[3] == grid[8]// columnsjmp _label_wrong if grid[0] == grid[9]jmp _label_wrong if grid[0] == grid[18]jmp _label_wrong if grid[0] == grid[27]...jmp _label_wrong if grid[62] == grid[80]jmp _label_wrong if grid[71] == grid[80]// subgridsjmp _label_wrong if grid[0] == grid[1]jmp _label_wrong if grid[0] == grid[2]jmp _label_wrong if grid[0] == grid[9]jmp _label_wrong if grid[0] == grid[10]...jmp _label_wrong if grid[78] == grid[79]jmp _label_wrong if grid[78] == grid[80]jmp _label_wrong if grid[79] == grid[80]// check rangejmp _label_wrong if outofnumbers(grid[1])jmp _label_wrong if outofnumbers(grid[2])jmp _label_wrong if outofnumbers(grid[3])jmp _label_wrong if outofnumbers(grid[4])...jmp _label_wrong if outofnumbers(grid[76])jmp _label_wrong if outofnumbers(grid[77])jmp _label_wrong if outofnumbers(grid[78])jmp _label_wrong if outofnumbers(grid[79])_label_correct:print(correct)return_label_wrong:print(wrong)returnI wrote an assembler for this assembly, which was used to generate the final challenge that the players got. The assembler wasn’t open-sourced since it’s ugly.During the competition, due to the negligence of myself, the implementation of the outofnumbers (var) function was incorrectly written as return var not in range (10), resulting in multiple solutions. Since the target Sudoku should only be filled with 1 ~ 9, the correct implementation should be return var not in range (1, 10). This was my fault, and I had to update the challenge with a fixed one during the competition.Sudoku MapSolutionTo solve this challenge, there is no need to simplify all the logical operations. Since there is no complicated loop in the chal’s actual control flow, we can find conditions that prevent the control flow from jumping to the part which outputs “Sorry” through simple control flow tracing and symbolic analysis. Finally, we can use an SMT solver to solve the constraints that we get through the previous analysis(That’s how ThinerDAS solved this challenge).Flag: d3ctf{g5lk9t28zz47y3l6m2kosbajd2vk9e2dwghxgfktcki}  Referenceable solution script: sol.py by ByaiduThe source code of this challenge(not fully open-sourced) and a duplicate of this post are uploaded to GitHub, check them out at: https://github.com/yype/D3CTF_Rev/tree/master/AncientGameV2.More..I’ve always found OISC quite interesting to me. This challenge was just a demo of one of my ideas, maybe I will do some extra work related to OISC in the upcoming future.",
            "content_html": "<h2 id=\"intro\">Intro</h2><p>I designed the RE challenge <em>Ancient Game V2</em> in D^3CTF2019. This post is about some related stuff along with the chal’s solution.</p><h2 id=\"challenge\">Challenge</h2><p>This challenge uses a virtual architecture similar to OISC to implement a classic Sudoku verification. There are basically just 4 types of instructions: input, output, jcc and NAND, which can also be seen as an OISC with two I/O interrupts introduced. All logical operations are implemented through NAND gates.</p><p>Operations like XOR / AND / OR are all implemented by combinations of NAND gates, for example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>xor x,y =&gt;xor_tmp[0] = y NAND yxor_tmp[1] = x NAND xor_tmp[0]xor_tmp[2] = x NAND xxor_tmp[3] = y NAND xor_tmp[2]x = xor_tmp[1] NAND xor_tmp[3]</code></pre></div></div><p>Which is based on the fact that:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Q = A XOR B = [ B NAND ( A NAND A ) ] NAND [ A NAND ( B NAND B ) ]</code></pre></div></div><p>An excerpt of the Sudoku Verifier code in my <em>self-defined assembly</em>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>welcome = mkstr(\"**************************\\n**  Welcome To D^3CTF   **\\n**   Ancient Game V2    **\\n**************************\\n\\nInput Flag:\")wrong = mkstr(\"\\nSorry, please try again.\\n\")correct = mkstr(\"\\nCorrect.\\n\")flag = new(50)// distract = new(1000)grid = new(81)// initialize the puzzleset(grid[0],9)set(grid[5],8)set(grid[9],1)set(grid[10],3)set(grid[14],9)set(grid[16],7)...set(grid[71],6)set(grid[75],9)set(grid[80],1)__code_start__// print the welcome messageprint(welcome)// get inputinput(flag[0])input(flag[1])input(flag[2])input(flag[3])input(flag[4])input(flag[5])...input(flag[46])input(flag[47])input(flag[48])input(flag[49])// transfer chars in the flag into the gridslong_transfer(flag[0],grid[1])long_transfer(flag[1],grid[2])...long_transfer(flag[47],grid[77])long_transfer(flag[48],grid[78])long_transfer(flag[49],grid[79])// xor with xor_table, which is introduced //   for generating different flags to different teamsgrid[1] = grid[1] ^ xor_table[0]grid[2] = grid[2] ^ xor_table[1]grid[3] = grid[3] ^ xor_table[2]grid[4] = grid[4] ^ xor_table[3]grid[6] = grid[6] ^ xor_table[4]grid[7] = grid[7] ^ xor_table[5]...grid[77] = grid[77] ^ xor_table[47]grid[78] = grid[78] ^ xor_table[48]grid[79] = grid[79] ^ xor_table[49]// verify the sudoku game// rowsjmp _label_wrong if grid[4] == grid[5]jmp _label_wrong if grid[4] == grid[6]jmp _label_wrong if grid[4] == grid[7]...jmp _label_wrong if grid[3] == grid[7]jmp _label_wrong if grid[3] == grid[8]// columnsjmp _label_wrong if grid[0] == grid[9]jmp _label_wrong if grid[0] == grid[18]jmp _label_wrong if grid[0] == grid[27]...jmp _label_wrong if grid[62] == grid[80]jmp _label_wrong if grid[71] == grid[80]// subgridsjmp _label_wrong if grid[0] == grid[1]jmp _label_wrong if grid[0] == grid[2]jmp _label_wrong if grid[0] == grid[9]jmp _label_wrong if grid[0] == grid[10]...jmp _label_wrong if grid[78] == grid[79]jmp _label_wrong if grid[78] == grid[80]jmp _label_wrong if grid[79] == grid[80]// check rangejmp _label_wrong if outofnumbers(grid[1])jmp _label_wrong if outofnumbers(grid[2])jmp _label_wrong if outofnumbers(grid[3])jmp _label_wrong if outofnumbers(grid[4])...jmp _label_wrong if outofnumbers(grid[76])jmp _label_wrong if outofnumbers(grid[77])jmp _label_wrong if outofnumbers(grid[78])jmp _label_wrong if outofnumbers(grid[79])_label_correct:print(correct)return_label_wrong:print(wrong)return</code></pre></div></div><p>I wrote an assembler for this assembly, which was used to generate the final challenge that the players got. The assembler wasn’t open-sourced since it’s ugly.</p><p>During the competition, due to the negligence of myself, the implementation of the <code class=\"highlighter-rouge\">outofnumbers (var)</code> function was incorrectly written as <code class=\"highlighter-rouge\">return var not in range (10)</code>, resulting in multiple solutions. Since the target Sudoku should only be filled with 1 ~ 9, the correct implementation should be <code class=\"highlighter-rouge\">return var not in range (1, 10)</code>. This was my fault, and I had to update the challenge with a fixed one during the competition.</p><p><strong>Sudoku Map</strong></p><p><img src=\"https://camo.githubusercontent.com/9e3d18179573b913f906045e17194334fe646330e821fc86032756fece3958a2/68747470733a2f2f692e696d6775722e636f6d2f50727a6d7945752e706e67\" alt=\"\" /></p><p><strong>Solution</strong></p><p>To solve this challenge, there is no need to simplify all the logical operations. Since there is no complicated loop in the chal’s actual control flow, we can find conditions that prevent the control flow from jumping to the part which outputs “Sorry” through simple control flow tracing and symbolic analysis. Finally, we can use an SMT solver to solve the constraints that we get through the previous analysis(That’s how ThinerDAS solved this challenge).</p><p>Flag: d3ctf{g5lk9t28zz47y3l6m2kosbajd2vk9e2dwghxgfktcki}</p><blockquote>  <p>Referenceable solution script: <a href=\"https://github.com/0h2o/D3CTF_Rev/blob/master/AncientGameV2/sol.py\">sol.py</a> by <a href=\"https://github.com/byaidu\">Byaidu</a></p></blockquote><p>The source code of this challenge(not fully open-sourced) and a duplicate of this post are uploaded to GitHub, check them out at: <a href=\"https://github.com/yype/D3CTF_Rev/tree/master/AncientGameV2\" target=\"_blank\">https://github.com/yype/D3CTF_Rev/tree/master/AncientGameV2</a>.</p><h2 id=\"more\">More..</h2><p>I’ve always found OISC quite interesting to me. This challenge was just a demo of one of my ideas, maybe I will do some extra work related to OISC in the upcoming future.</p>",
            "url": "http://localhost:4000/2020/02/20/ancient-game-v2",
            
            
            
            "tags": ["CTF","Reverse Engineering","D^3CTF2019","OISC"],
            
            "date_published": "2020-02-20T00:00:00+08:00",
            "date_modified": "2020-02-20T00:00:00+08:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}